
SensoRTOS_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032e8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c4  080034b8  080034b8  000044b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e7c  08003e7c  00005058  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003e7c  08003e7c  00004e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e84  08003e84  00005058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e84  08003e84  00004e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e88  08003e88  00004e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  08003e8c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004170  20000058  08003ee4  00005058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200041c8  08003ee4  000051c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8dd  00000000  00000000  00005088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002813  00000000  00000000  00010965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  00013178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000090a  00000000  00000000  00013db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248e2  00000000  00000000  000146c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bb3  00000000  00000000  00038fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4948  00000000  00000000  0004cb57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012149f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031cc  00000000  00000000  001214e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001246b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000058 	.word	0x20000058
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080034a0 	.word	0x080034a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000005c 	.word	0x2000005c
 800020c:	080034a0 	.word	0x080034a0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <DWT_Init>:
 *      Author: sandeep
 */
#include "stm32f4xx.h"
#include "stdint.h"

void DWT_Init(void) {
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable trace
 80002d4:	4b08      	ldr	r3, [pc, #32]	@ (80002f8 <DWT_Init+0x28>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	4a07      	ldr	r2, [pc, #28]	@ (80002f8 <DWT_Init+0x28>)
 80002da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002de:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable the cycle counter
 80002e0:	4b06      	ldr	r3, [pc, #24]	@ (80002fc <DWT_Init+0x2c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a05      	ldr	r2, [pc, #20]	@ (80002fc <DWT_Init+0x2c>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6013      	str	r3, [r2, #0]
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000edf0 	.word	0xe000edf0
 80002fc:	e0001000 	.word	0xe0001000

08000300 <delay_us>:

void delay_us(uint32_t us) {
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8000308:	4b0d      	ldr	r3, [pc, #52]	@ (8000340 <delay_us+0x40>)
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (SystemCoreClock / 1000000); // 180 ticks per us at 180 MHz
 800030e:	4b0d      	ldr	r3, [pc, #52]	@ (8000344 <delay_us+0x44>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a0d      	ldr	r2, [pc, #52]	@ (8000348 <delay_us+0x48>)
 8000314:	fba2 2303 	umull	r2, r3, r2, r3
 8000318:	0c9a      	lsrs	r2, r3, #18
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	fb02 f303 	mul.w	r3, r2, r3
 8000320:	60bb      	str	r3, [r7, #8]

    while ((DWT->CYCCNT - start) < ticks);
 8000322:	bf00      	nop
 8000324:	4b06      	ldr	r3, [pc, #24]	@ (8000340 <delay_us+0x40>)
 8000326:	685a      	ldr	r2, [r3, #4]
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	1ad3      	subs	r3, r2, r3
 800032c:	68ba      	ldr	r2, [r7, #8]
 800032e:	429a      	cmp	r2, r3
 8000330:	d8f8      	bhi.n	8000324 <delay_us+0x24>
}
 8000332:	bf00      	nop
 8000334:	bf00      	nop
 8000336:	3714      	adds	r7, #20
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	e0001000 	.word	0xe0001000
 8000344:	20000000 	.word	0x20000000
 8000348:	431bde83 	.word	0x431bde83

0800034c <DHT11_Init>:
#define DHT11_WRITE_HIGH()   (DHT11_PORT->BSRR = (1U << DHT11_PIN))
#define DHT11_READ()         ((DHT11_PORT->IDR >> DHT11_PIN) & 0x1)

// ---------------------- DHT11 Protocol -------------------------

void DHT11_Init(void) {
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; // Enable GPIOB clock
 8000350:	4b12      	ldr	r3, [pc, #72]	@ (800039c <DHT11_Init+0x50>)
 8000352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000354:	4a11      	ldr	r2, [pc, #68]	@ (800039c <DHT11_Init+0x50>)
 8000356:	f043 0302 	orr.w	r3, r3, #2
 800035a:	6313      	str	r3, [r2, #48]	@ 0x30
    DWT_Init(); // Enable DWT cycle counter
 800035c:	f7ff ffb8 	bl	80002d0 <DWT_Init>
    DHT11_OUTPUT();
 8000360:	4b0f      	ldr	r3, [pc, #60]	@ (80003a0 <DHT11_Init+0x54>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a0e      	ldr	r2, [pc, #56]	@ (80003a0 <DHT11_Init+0x54>)
 8000366:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800036a:	6013      	str	r3, [r2, #0]
 800036c:	4b0c      	ldr	r3, [pc, #48]	@ (80003a0 <DHT11_Init+0x54>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a0b      	ldr	r2, [pc, #44]	@ (80003a0 <DHT11_Init+0x54>)
 8000372:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000376:	6013      	str	r3, [r2, #0]
 8000378:	4b09      	ldr	r3, [pc, #36]	@ (80003a0 <DHT11_Init+0x54>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	4a08      	ldr	r2, [pc, #32]	@ (80003a0 <DHT11_Init+0x54>)
 800037e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000382:	6053      	str	r3, [r2, #4]
 8000384:	4b06      	ldr	r3, [pc, #24]	@ (80003a0 <DHT11_Init+0x54>)
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	4a05      	ldr	r2, [pc, #20]	@ (80003a0 <DHT11_Init+0x54>)
 800038a:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800038e:	6093      	str	r3, [r2, #8]
    DHT11_WRITE_HIGH();
 8000390:	4b03      	ldr	r3, [pc, #12]	@ (80003a0 <DHT11_Init+0x54>)
 8000392:	2240      	movs	r2, #64	@ 0x40
 8000394:	619a      	str	r2, [r3, #24]
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40023800 	.word	0x40023800
 80003a0:	40020400 	.word	0x40020400

080003a4 <DHT11_CheckResponse>:

static uint8_t DHT11_CheckResponse(void) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
    uint8_t response = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	71fb      	strb	r3, [r7, #7]
    delay_us(40);
 80003ae:	2028      	movs	r0, #40	@ 0x28
 80003b0:	f7ff ffa6 	bl	8000300 <delay_us>
    if (!DHT11_READ()) {
 80003b4:	4b0d      	ldr	r3, [pc, #52]	@ (80003ec <DHT11_CheckResponse+0x48>)
 80003b6:	691b      	ldr	r3, [r3, #16]
 80003b8:	099b      	lsrs	r3, r3, #6
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d10e      	bne.n	80003e0 <DHT11_CheckResponse+0x3c>
        delay_us(80);
 80003c2:	2050      	movs	r0, #80	@ 0x50
 80003c4:	f7ff ff9c 	bl	8000300 <delay_us>
        if (DHT11_READ()) response = 1;
 80003c8:	4b08      	ldr	r3, [pc, #32]	@ (80003ec <DHT11_CheckResponse+0x48>)
 80003ca:	691b      	ldr	r3, [r3, #16]
 80003cc:	099b      	lsrs	r3, r3, #6
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <DHT11_CheckResponse+0x36>
 80003d6:	2301      	movs	r3, #1
 80003d8:	71fb      	strb	r3, [r7, #7]
        delay_us(50);
 80003da:	2032      	movs	r0, #50	@ 0x32
 80003dc:	f7ff ff90 	bl	8000300 <delay_us>
    }
    return response;
 80003e0:	79fb      	ldrb	r3, [r7, #7]
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40020400 	.word	0x40020400

080003f0 <DHT11_ReadByte>:

static uint8_t DHT11_ReadByte(void) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
    uint8_t i, byte = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	71bb      	strb	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 80003fa:	2300      	movs	r3, #0
 80003fc:	71fb      	strb	r3, [r7, #7]
 80003fe:	e028      	b.n	8000452 <DHT11_ReadByte+0x62>
        while (!DHT11_READ());      // Wait for HIGH
 8000400:	bf00      	nop
 8000402:	4b18      	ldr	r3, [pc, #96]	@ (8000464 <DHT11_ReadByte+0x74>)
 8000404:	691b      	ldr	r3, [r3, #16]
 8000406:	099b      	lsrs	r3, r3, #6
 8000408:	f003 0301 	and.w	r3, r3, #1
 800040c:	2b00      	cmp	r3, #0
 800040e:	d0f8      	beq.n	8000402 <DHT11_ReadByte+0x12>
        delay_us(40);               // Wait ~40us
 8000410:	2028      	movs	r0, #40	@ 0x28
 8000412:	f7ff ff75 	bl	8000300 <delay_us>
        if (DHT11_READ()) {
 8000416:	4b13      	ldr	r3, [pc, #76]	@ (8000464 <DHT11_ReadByte+0x74>)
 8000418:	691b      	ldr	r3, [r3, #16]
 800041a:	099b      	lsrs	r3, r3, #6
 800041c:	f003 0301 	and.w	r3, r3, #1
 8000420:	2b00      	cmp	r3, #0
 8000422:	d013      	beq.n	800044c <DHT11_ReadByte+0x5c>
            byte |= (1 << (7 - i));
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	f1c3 0307 	rsb	r3, r3, #7
 800042a:	2201      	movs	r2, #1
 800042c:	fa02 f303 	lsl.w	r3, r2, r3
 8000430:	b25a      	sxtb	r2, r3
 8000432:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000436:	4313      	orrs	r3, r2
 8000438:	b25b      	sxtb	r3, r3
 800043a:	71bb      	strb	r3, [r7, #6]
            while (DHT11_READ());  // Wait for LOW
 800043c:	bf00      	nop
 800043e:	4b09      	ldr	r3, [pc, #36]	@ (8000464 <DHT11_ReadByte+0x74>)
 8000440:	691b      	ldr	r3, [r3, #16]
 8000442:	099b      	lsrs	r3, r3, #6
 8000444:	f003 0301 	and.w	r3, r3, #1
 8000448:	2b00      	cmp	r3, #0
 800044a:	d1f8      	bne.n	800043e <DHT11_ReadByte+0x4e>
    for (i = 0; i < 8; i++) {
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	3301      	adds	r3, #1
 8000450:	71fb      	strb	r3, [r7, #7]
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	2b07      	cmp	r3, #7
 8000456:	d9d3      	bls.n	8000400 <DHT11_ReadByte+0x10>
        }
    }
    return byte;
 8000458:	79bb      	ldrb	r3, [r7, #6]
}
 800045a:	4618      	mov	r0, r3
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40020400 	.word	0x40020400

08000468 <DHT11_Read>:

uint8_t DHT11_Read(DHT11_Data *data) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
    uint8_t hum_int, hum_dec, temp_int, temp_dec, chk;

    DHT11_OUTPUT();
 8000470:	4b39      	ldr	r3, [pc, #228]	@ (8000558 <DHT11_Read+0xf0>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a38      	ldr	r2, [pc, #224]	@ (8000558 <DHT11_Read+0xf0>)
 8000476:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800047a:	6013      	str	r3, [r2, #0]
 800047c:	4b36      	ldr	r3, [pc, #216]	@ (8000558 <DHT11_Read+0xf0>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a35      	ldr	r2, [pc, #212]	@ (8000558 <DHT11_Read+0xf0>)
 8000482:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000486:	6013      	str	r3, [r2, #0]
 8000488:	4b33      	ldr	r3, [pc, #204]	@ (8000558 <DHT11_Read+0xf0>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	4a32      	ldr	r2, [pc, #200]	@ (8000558 <DHT11_Read+0xf0>)
 800048e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000492:	6053      	str	r3, [r2, #4]
 8000494:	4b30      	ldr	r3, [pc, #192]	@ (8000558 <DHT11_Read+0xf0>)
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	4a2f      	ldr	r2, [pc, #188]	@ (8000558 <DHT11_Read+0xf0>)
 800049a:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800049e:	6093      	str	r3, [r2, #8]
    DHT11_WRITE_LOW();
 80004a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000558 <DHT11_Read+0xf0>)
 80004a2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80004a6:	619a      	str	r2, [r3, #24]
    delay_us(18000); // Start signal (>18ms)
 80004a8:	f244 6050 	movw	r0, #18000	@ 0x4650
 80004ac:	f7ff ff28 	bl	8000300 <delay_us>
    DHT11_WRITE_HIGH();
 80004b0:	4b29      	ldr	r3, [pc, #164]	@ (8000558 <DHT11_Read+0xf0>)
 80004b2:	2240      	movs	r2, #64	@ 0x40
 80004b4:	619a      	str	r2, [r3, #24]
    delay_us(30);
 80004b6:	201e      	movs	r0, #30
 80004b8:	f7ff ff22 	bl	8000300 <delay_us>
    DHT11_INPUT();
 80004bc:	4b26      	ldr	r3, [pc, #152]	@ (8000558 <DHT11_Read+0xf0>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a25      	ldr	r2, [pc, #148]	@ (8000558 <DHT11_Read+0xf0>)
 80004c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80004c6:	6013      	str	r3, [r2, #0]
 80004c8:	4b23      	ldr	r3, [pc, #140]	@ (8000558 <DHT11_Read+0xf0>)
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	4a22      	ldr	r2, [pc, #136]	@ (8000558 <DHT11_Read+0xf0>)
 80004ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80004d2:	60d3      	str	r3, [r2, #12]
 80004d4:	4b20      	ldr	r3, [pc, #128]	@ (8000558 <DHT11_Read+0xf0>)
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	4a1f      	ldr	r2, [pc, #124]	@ (8000558 <DHT11_Read+0xf0>)
 80004da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004de:	60d3      	str	r3, [r2, #12]

    if (DHT11_CheckResponse()) {
 80004e0:	f7ff ff60 	bl	80003a4 <DHT11_CheckResponse>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d02e      	beq.n	8000548 <DHT11_Read+0xe0>
        hum_int = DHT11_ReadByte();
 80004ea:	f7ff ff81 	bl	80003f0 <DHT11_ReadByte>
 80004ee:	4603      	mov	r3, r0
 80004f0:	73fb      	strb	r3, [r7, #15]
        hum_dec = DHT11_ReadByte();
 80004f2:	f7ff ff7d 	bl	80003f0 <DHT11_ReadByte>
 80004f6:	4603      	mov	r3, r0
 80004f8:	73bb      	strb	r3, [r7, #14]
        temp_int = DHT11_ReadByte();
 80004fa:	f7ff ff79 	bl	80003f0 <DHT11_ReadByte>
 80004fe:	4603      	mov	r3, r0
 8000500:	737b      	strb	r3, [r7, #13]
        temp_dec = DHT11_ReadByte();
 8000502:	f7ff ff75 	bl	80003f0 <DHT11_ReadByte>
 8000506:	4603      	mov	r3, r0
 8000508:	733b      	strb	r3, [r7, #12]
        chk = DHT11_ReadByte();
 800050a:	f7ff ff71 	bl	80003f0 <DHT11_ReadByte>
 800050e:	4603      	mov	r3, r0
 8000510:	72fb      	strb	r3, [r7, #11]

        data->temperature = temp_int;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	7b7a      	ldrb	r2, [r7, #13]
 8000516:	701a      	strb	r2, [r3, #0]
        data->humidity = hum_int;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	7bfa      	ldrb	r2, [r7, #15]
 800051c:	705a      	strb	r2, [r3, #1]
        data->checksum = chk;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	7afa      	ldrb	r2, [r7, #11]
 8000522:	709a      	strb	r2, [r3, #2]
        data->valid = ((hum_int + hum_dec + temp_int + temp_dec) == chk) ? 1 : 0;
 8000524:	7bfa      	ldrb	r2, [r7, #15]
 8000526:	7bbb      	ldrb	r3, [r7, #14]
 8000528:	441a      	add	r2, r3
 800052a:	7b7b      	ldrb	r3, [r7, #13]
 800052c:	441a      	add	r2, r3
 800052e:	7b3b      	ldrb	r3, [r7, #12]
 8000530:	441a      	add	r2, r3
 8000532:	7afb      	ldrb	r3, [r7, #11]
 8000534:	429a      	cmp	r2, r3
 8000536:	bf0c      	ite	eq
 8000538:	2301      	moveq	r3, #1
 800053a:	2300      	movne	r3, #0
 800053c:	b2db      	uxtb	r3, r3
 800053e:	461a      	mov	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	70da      	strb	r2, [r3, #3]
        return 1;
 8000544:	2301      	movs	r3, #1
 8000546:	e003      	b.n	8000550 <DHT11_Read+0xe8>
    }
    data->valid = 0;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2200      	movs	r2, #0
 800054c:	70da      	strb	r2, [r3, #3]
    return 0;
 800054e:	2300      	movs	r3, #0
}
 8000550:	4618      	mov	r0, r3
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40020400 	.word	0x40020400

0800055c <GPIO_Init>:
 *  Created on: May 21, 2025
 *      Author: sandeep
 */
#include "stm32f4xx.h"

void GPIO_Init(void) {
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
    // Enable GPIOA clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000560:	4b1d      	ldr	r3, [pc, #116]	@ (80005d8 <GPIO_Init+0x7c>)
 8000562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000564:	4a1c      	ldr	r2, [pc, #112]	@ (80005d8 <GPIO_Init+0x7c>)
 8000566:	f043 0301 	orr.w	r3, r3, #1
 800056a:	6313      	str	r3, [r2, #48]	@ 0x30

    // PA5: LED, PA9: Buzzer
    GPIOA->MODER &= ~(0x3 << (2 * 5));  // Clear mode for PA5
 800056c:	4b1b      	ldr	r3, [pc, #108]	@ (80005dc <GPIO_Init+0x80>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a1a      	ldr	r2, [pc, #104]	@ (80005dc <GPIO_Init+0x80>)
 8000572:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000576:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0x1 << (2 * 5));  // Set PA5 as output
 8000578:	4b18      	ldr	r3, [pc, #96]	@ (80005dc <GPIO_Init+0x80>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a17      	ldr	r2, [pc, #92]	@ (80005dc <GPIO_Init+0x80>)
 800057e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000582:	6013      	str	r3, [r2, #0]

    GPIOA->MODER &= ~(0x3 << (2 * 9));  // Clear mode for PA9
 8000584:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <GPIO_Init+0x80>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a14      	ldr	r2, [pc, #80]	@ (80005dc <GPIO_Init+0x80>)
 800058a:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800058e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (0x1 << (2 * 9));  // Set PA9 as output
 8000590:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <GPIO_Init+0x80>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a11      	ldr	r2, [pc, #68]	@ (80005dc <GPIO_Init+0x80>)
 8000596:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800059a:	6013      	str	r3, [r2, #0]

    GPIOA->OTYPER &= ~(1 << 5); // PA5: push-pull
 800059c:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <GPIO_Init+0x80>)
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	4a0e      	ldr	r2, [pc, #56]	@ (80005dc <GPIO_Init+0x80>)
 80005a2:	f023 0320 	bic.w	r3, r3, #32
 80005a6:	6053      	str	r3, [r2, #4]
    GPIOA->OTYPER &= ~(1 << 9); // PA9: push-pull
 80005a8:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <GPIO_Init+0x80>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	4a0b      	ldr	r2, [pc, #44]	@ (80005dc <GPIO_Init+0x80>)
 80005ae:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80005b2:	6053      	str	r3, [r2, #4]

    GPIOA->OSPEEDR |= (0x3 << (2 * 5)); // PA5: high speed
 80005b4:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <GPIO_Init+0x80>)
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	4a08      	ldr	r2, [pc, #32]	@ (80005dc <GPIO_Init+0x80>)
 80005ba:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80005be:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |= (0x3 << (2 * 9)); // PA9: high speed
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <GPIO_Init+0x80>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	4a05      	ldr	r2, [pc, #20]	@ (80005dc <GPIO_Init+0x80>)
 80005c6:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80005ca:	6093      	str	r3, [r2, #8]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40020000 	.word	0x40020000

080005e0 <LED_Toggle>:


void LED_Toggle(void) {
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
    GPIOA->ODR ^= (1 << 5);
 80005e4:	4b05      	ldr	r3, [pc, #20]	@ (80005fc <LED_Toggle+0x1c>)
 80005e6:	695b      	ldr	r3, [r3, #20]
 80005e8:	4a04      	ldr	r2, [pc, #16]	@ (80005fc <LED_Toggle+0x1c>)
 80005ea:	f083 0320 	eor.w	r3, r3, #32
 80005ee:	6153      	str	r3, [r2, #20]
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40020000 	.word	0x40020000

08000600 <Buzzer_On>:

void Buzzer_On(void) {
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
    GPIOA->ODR |= (1 << 9);  // Set PA9 high
 8000604:	4b05      	ldr	r3, [pc, #20]	@ (800061c <Buzzer_On+0x1c>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a04      	ldr	r2, [pc, #16]	@ (800061c <Buzzer_On+0x1c>)
 800060a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800060e:	6153      	str	r3, [r2, #20]
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40020000 	.word	0x40020000

08000620 <Buzzer_Off>:

void Buzzer_Off(void) {
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~(1 << 9); // Set PA9 low
 8000624:	4b05      	ldr	r3, [pc, #20]	@ (800063c <Buzzer_Off+0x1c>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	4a04      	ldr	r2, [pc, #16]	@ (800063c <Buzzer_Off+0x1c>)
 800062a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800062e:	6153      	str	r3, [r2, #20]
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40020000 	.word	0x40020000

08000640 <HC_SR04_Init>:
#define TRIG_HIGH()  (TRIG_PORT->BSRR = (1U << TRIG_PIN))
#define TRIG_LOW()   (TRIG_PORT->BSRR = (1U << (TRIG_PIN + 16)))

#define ECHO_READ()  ((ECHO_PORT->IDR >> ECHO_PIN) & 0x1)

void HC_SR04_Init(void) {
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
    // Enable GPIOA clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000644:	4b1f      	ldr	r3, [pc, #124]	@ (80006c4 <HC_SR04_Init+0x84>)
 8000646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000648:	4a1e      	ldr	r2, [pc, #120]	@ (80006c4 <HC_SR04_Init+0x84>)
 800064a:	f043 0301 	orr.w	r3, r3, #1
 800064e:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PA6 as output (Trig)
    GPIOA->MODER &= ~(3U << (6 * 2));
 8000650:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <HC_SR04_Init+0x88>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a1c      	ldr	r2, [pc, #112]	@ (80006c8 <HC_SR04_Init+0x88>)
 8000656:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800065a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (1U << (6 * 2));  // Output mode
 800065c:	4b1a      	ldr	r3, [pc, #104]	@ (80006c8 <HC_SR04_Init+0x88>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a19      	ldr	r2, [pc, #100]	@ (80006c8 <HC_SR04_Init+0x88>)
 8000662:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000666:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(1U << 6);       // Push-pull
 8000668:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <HC_SR04_Init+0x88>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	4a16      	ldr	r2, [pc, #88]	@ (80006c8 <HC_SR04_Init+0x88>)
 800066e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000672:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= (3U << (6 * 2)); // High speed
 8000674:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <HC_SR04_Init+0x88>)
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	4a13      	ldr	r2, [pc, #76]	@ (80006c8 <HC_SR04_Init+0x88>)
 800067a:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800067e:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR &= ~(3U << (6 * 2));  // No pull-up/down for trig pin
 8000680:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <HC_SR04_Init+0x88>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	4a10      	ldr	r2, [pc, #64]	@ (80006c8 <HC_SR04_Init+0x88>)
 8000686:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800068a:	60d3      	str	r3, [r2, #12]

    // Configure PA7 as input (Echo) with internal pull-down
    GPIOA->MODER &= ~(3U << (7 * 2));  // Input mode
 800068c:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <HC_SR04_Init+0x88>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a0d      	ldr	r2, [pc, #52]	@ (80006c8 <HC_SR04_Init+0x88>)
 8000692:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000696:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3U << (7 * 2));  // Clear bits first
 8000698:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <HC_SR04_Init+0x88>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	4a0a      	ldr	r2, [pc, #40]	@ (80006c8 <HC_SR04_Init+0x88>)
 800069e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a2:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (2U << (7 * 2));  // Enable pull-down
 80006a4:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <HC_SR04_Init+0x88>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	4a07      	ldr	r2, [pc, #28]	@ (80006c8 <HC_SR04_Init+0x88>)
 80006aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006ae:	60d3      	str	r3, [r2, #12]

    // Set Trig low initially
    GPIOA->BSRR = (1U << (6 + 16));  // Reset PA6
 80006b0:	4b05      	ldr	r3, [pc, #20]	@ (80006c8 <HC_SR04_Init+0x88>)
 80006b2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006b6:	619a      	str	r2, [r3, #24]
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40020000 	.word	0x40020000

080006cc <HC_SR04_ReadDistance>:

uint32_t HC_SR04_ReadDistance(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
    uint32_t count = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
    uint32_t timeout = 60000; // 60ms timeout (~60,000 us)
 80006d6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80006da:	603b      	str	r3, [r7, #0]

    // Trigger pulse: 10 us high
    TRIG_HIGH();
 80006dc:	4b20      	ldr	r3, [pc, #128]	@ (8000760 <HC_SR04_ReadDistance+0x94>)
 80006de:	2240      	movs	r2, #64	@ 0x40
 80006e0:	619a      	str	r2, [r3, #24]
    delay_us(10);
 80006e2:	200a      	movs	r0, #10
 80006e4:	f7ff fe0c 	bl	8000300 <delay_us>
    TRIG_LOW();
 80006e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <HC_SR04_ReadDistance+0x94>)
 80006ea:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80006ee:	619a      	str	r2, [r3, #24]

    // Wait for echo to go HIGH (start)
    timeout = 60000;
 80006f0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80006f4:	603b      	str	r3, [r7, #0]
    while (!ECHO_READ()) {
 80006f6:	e00a      	b.n	800070e <HC_SR04_ReadDistance+0x42>
        if (--timeout == 0) return 0; // timeout error
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d101      	bne.n	8000708 <HC_SR04_ReadDistance+0x3c>
 8000704:	2300      	movs	r3, #0
 8000706:	e027      	b.n	8000758 <HC_SR04_ReadDistance+0x8c>
        delay_us(1);
 8000708:	2001      	movs	r0, #1
 800070a:	f7ff fdf9 	bl	8000300 <delay_us>
    while (!ECHO_READ()) {
 800070e:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <HC_SR04_ReadDistance+0x94>)
 8000710:	691b      	ldr	r3, [r3, #16]
 8000712:	09db      	lsrs	r3, r3, #7
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0ed      	beq.n	80006f8 <HC_SR04_ReadDistance+0x2c>
    }
    // Measure pulse width while echo is HIGH
    count = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
    timeout = 60000;
 8000720:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8000724:	603b      	str	r3, [r7, #0]
    while (ECHO_READ()) {
 8000726:	e00b      	b.n	8000740 <HC_SR04_ReadDistance+0x74>
        if (++count >= timeout) return 0; // timeout error
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3301      	adds	r3, #1
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	429a      	cmp	r2, r3
 8000734:	d301      	bcc.n	800073a <HC_SR04_ReadDistance+0x6e>
 8000736:	2300      	movs	r3, #0
 8000738:	e00e      	b.n	8000758 <HC_SR04_ReadDistance+0x8c>
        delay_us(1);
 800073a:	2001      	movs	r0, #1
 800073c:	f7ff fde0 	bl	8000300 <delay_us>
    while (ECHO_READ()) {
 8000740:	4b07      	ldr	r3, [pc, #28]	@ (8000760 <HC_SR04_ReadDistance+0x94>)
 8000742:	691b      	ldr	r3, [r3, #16]
 8000744:	09db      	lsrs	r3, r3, #7
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	2b00      	cmp	r3, #0
 800074c:	d1ec      	bne.n	8000728 <HC_SR04_ReadDistance+0x5c>
    }

    // Distance in cm = pulse duration(us) / 58
    return count / 58;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a04      	ldr	r2, [pc, #16]	@ (8000764 <HC_SR04_ReadDistance+0x98>)
 8000752:	fba2 2303 	umull	r2, r3, r2, r3
 8000756:	095b      	lsrs	r3, r3, #5
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40020000 	.word	0x40020000
 8000764:	8d3dcb09 	.word	0x8d3dcb09

08000768 <HCSR501_Init>:
 */
#include "stm32f4xx.h"
#include "hcsr501.h"
#include "delay.h"

void HCSR501_Init(void) {
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
    // Enable GPIOB clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800076c:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <HCSR501_Init+0x40>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000770:	4a0d      	ldr	r2, [pc, #52]	@ (80007a8 <HCSR501_Init+0x40>)
 8000772:	f043 0302 	orr.w	r3, r3, #2
 8000776:	6313      	str	r3, [r2, #48]	@ 0x30

    // Configure PB13 as input
    GPIOB->MODER &= ~(3 << (13 * 2));  // Input mode (00)
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <HCSR501_Init+0x44>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0b      	ldr	r2, [pc, #44]	@ (80007ac <HCSR501_Init+0x44>)
 800077e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000782:	6013      	str	r3, [r2, #0]

    // Configure PB13 with pull-down resistor
    GPIOB->PUPDR &= ~(3 << (13 * 2));  // Clear PUPDR bits for PB13
 8000784:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <HCSR501_Init+0x44>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	4a08      	ldr	r2, [pc, #32]	@ (80007ac <HCSR501_Init+0x44>)
 800078a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800078e:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |=  (2 << (13 * 2));  // Set pull-down (10)
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <HCSR501_Init+0x44>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	4a05      	ldr	r2, [pc, #20]	@ (80007ac <HCSR501_Init+0x44>)
 8000796:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800079a:	60d3      	str	r3, [r2, #12]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020400 	.word	0x40020400

080007b0 <I2C1_start>:
    I2C1->TRISE = 43; // TRISE = freq + 1

    I2C1->CR1 |= I2C_CR1_PE; // Enable I2C
}

void I2C1_start(uint8_t address, uint8_t direction) {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	460a      	mov	r2, r1
 80007ba:	71fb      	strb	r3, [r7, #7]
 80007bc:	4613      	mov	r3, r2
 80007be:	71bb      	strb	r3, [r7, #6]
    I2C1->CR1 |= I2C_CR1_START;
 80007c0:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <I2C1_start+0x54>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a0f      	ldr	r2, [pc, #60]	@ (8000804 <I2C1_start+0x54>)
 80007c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007ca:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 80007cc:	bf00      	nop
 80007ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <I2C1_start+0x54>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d0f9      	beq.n	80007ce <I2C1_start+0x1e>

    I2C1->DR = (address << 1) | direction;
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	005a      	lsls	r2, r3, #1
 80007de:	79bb      	ldrb	r3, [r7, #6]
 80007e0:	431a      	orrs	r2, r3
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <I2C1_start+0x54>)
 80007e4:	611a      	str	r2, [r3, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80007e6:	bf00      	nop
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <I2C1_start+0x54>)
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	f003 0302 	and.w	r3, r3, #2
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d0f9      	beq.n	80007e8 <I2C1_start+0x38>
    (void)I2C1->SR2;
 80007f4:	4b03      	ldr	r3, [pc, #12]	@ (8000804 <I2C1_start+0x54>)
 80007f6:	699b      	ldr	r3, [r3, #24]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	40005400 	.word	0x40005400

08000808 <I2C1_write>:

void I2C1_write(uint8_t data) {
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000812:	bf00      	nop
 8000814:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <I2C1_write+0x3c>)
 8000816:	695b      	ldr	r3, [r3, #20]
 8000818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800081c:	2b00      	cmp	r3, #0
 800081e:	d0f9      	beq.n	8000814 <I2C1_write+0xc>
    I2C1->DR = data;
 8000820:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <I2C1_write+0x3c>)
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 8000826:	bf00      	nop
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <I2C1_write+0x3c>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	2b00      	cmp	r3, #0
 8000832:	d0f9      	beq.n	8000828 <I2C1_write+0x20>
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40005400 	.word	0x40005400

08000848 <I2C1_stop>:

void I2C1_stop(void) {
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 800084c:	4b05      	ldr	r3, [pc, #20]	@ (8000864 <I2C1_stop+0x1c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a04      	ldr	r2, [pc, #16]	@ (8000864 <I2C1_stop+0x1c>)
 8000852:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000856:	6013      	str	r3, [r2, #0]
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40005400 	.word	0x40005400

08000868 <ssd1306_set_cursor>:
#define SSD1306_ADDR 0x3C

#define COMMAND 0x00
#define DATA    0x40

void ssd1306_set_cursor(uint8_t x, uint8_t page) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	460a      	mov	r2, r1
 8000872:	71fb      	strb	r3, [r7, #7]
 8000874:	4613      	mov	r3, r2
 8000876:	71bb      	strb	r3, [r7, #6]
    ssd1306_send_command(0xB0 + page);                  // Page address
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	3b50      	subs	r3, #80	@ 0x50
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f86a 	bl	8000958 <ssd1306_send_command>
    ssd1306_send_command(0x00 + (x & 0x0F));            // Lower nibble
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	f003 030f 	and.w	r3, r3, #15
 800088a:	b2db      	uxtb	r3, r3
 800088c:	4618      	mov	r0, r3
 800088e:	f000 f863 	bl	8000958 <ssd1306_send_command>
    ssd1306_send_command(0x10 + ((x >> 4) & 0x0F));     // Higher nibble
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	091b      	lsrs	r3, r3, #4
 8000896:	b2db      	uxtb	r3, r3
 8000898:	3310      	adds	r3, #16
 800089a:	b2db      	uxtb	r3, r3
 800089c:	4618      	mov	r0, r3
 800089e:	f000 f85b 	bl	8000958 <ssd1306_send_command>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <ssd1306_draw_char>:

void ssd1306_draw_char(uint8_t x, uint8_t page, char c) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
 80008b6:	460b      	mov	r3, r1
 80008b8:	71bb      	strb	r3, [r7, #6]
 80008ba:	4613      	mov	r3, r2
 80008bc:	717b      	strb	r3, [r7, #5]
    if (c < 32 || c > 126) c = '?'; // fallback to '?'
 80008be:	797b      	ldrb	r3, [r7, #5]
 80008c0:	2b1f      	cmp	r3, #31
 80008c2:	d902      	bls.n	80008ca <ssd1306_draw_char+0x1e>
 80008c4:	797b      	ldrb	r3, [r7, #5]
 80008c6:	2b7e      	cmp	r3, #126	@ 0x7e
 80008c8:	d901      	bls.n	80008ce <ssd1306_draw_char+0x22>
 80008ca:	233f      	movs	r3, #63	@ 0x3f
 80008cc:	717b      	strb	r3, [r7, #5]
    ssd1306_set_cursor(x, page);
 80008ce:	79ba      	ldrb	r2, [r7, #6]
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ffc7 	bl	8000868 <ssd1306_set_cursor>
    for (int i = 0; i < 5; i++) {
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	e010      	b.n	8000902 <ssd1306_draw_char+0x56>
        ssd1306_send_data(font5x7[c - 32][i]);
 80008e0:	797b      	ldrb	r3, [r7, #5]
 80008e2:	f1a3 0220 	sub.w	r2, r3, #32
 80008e6:	490c      	ldr	r1, [pc, #48]	@ (8000918 <ssd1306_draw_char+0x6c>)
 80008e8:	4613      	mov	r3, r2
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	4413      	add	r3, r2
 80008ee:	18ca      	adds	r2, r1, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4413      	add	r3, r2
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f844 	bl	8000984 <ssd1306_send_data>
    for (int i = 0; i < 5; i++) {
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	3301      	adds	r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	2b04      	cmp	r3, #4
 8000906:	ddeb      	ble.n	80008e0 <ssd1306_draw_char+0x34>
    }
    ssd1306_send_data(0x00); // spacing
 8000908:	2000      	movs	r0, #0
 800090a:	f000 f83b 	bl	8000984 <ssd1306_send_data>
}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	08003dc4 	.word	0x08003dc4

0800091c <ssd1306_draw_string>:

void ssd1306_draw_string(uint8_t x, uint8_t page, const char *str) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	603a      	str	r2, [r7, #0]
 8000926:	71fb      	strb	r3, [r7, #7]
 8000928:	460b      	mov	r3, r1
 800092a:	71bb      	strb	r3, [r7, #6]
    while (*str) {
 800092c:	e00b      	b.n	8000946 <ssd1306_draw_string+0x2a>
        ssd1306_draw_char(x, page, *str++);
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	1c5a      	adds	r2, r3, #1
 8000932:	603a      	str	r2, [r7, #0]
 8000934:	781a      	ldrb	r2, [r3, #0]
 8000936:	79b9      	ldrb	r1, [r7, #6]
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff ffb6 	bl	80008ac <ssd1306_draw_char>
        x += 6; // 5 pixels + 1 spacing
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	3306      	adds	r3, #6
 8000944:	71fb      	strb	r3, [r7, #7]
    while (*str) {
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d1ef      	bne.n	800092e <ssd1306_draw_string+0x12>
    }
}
 800094e:	bf00      	nop
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <ssd1306_send_command>:


void ssd1306_send_command(uint8_t cmd) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
    I2C1_start(SSD1306_ADDR, I2C_WRITE);
 8000962:	2100      	movs	r1, #0
 8000964:	203c      	movs	r0, #60	@ 0x3c
 8000966:	f7ff ff23 	bl	80007b0 <I2C1_start>
    I2C1_write(COMMAND);
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff ff4c 	bl	8000808 <I2C1_write>
    I2C1_write(cmd);
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff ff48 	bl	8000808 <I2C1_write>
    I2C1_stop();
 8000978:	f7ff ff66 	bl	8000848 <I2C1_stop>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <ssd1306_send_data>:

void ssd1306_send_data(uint8_t data) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
    I2C1_start(SSD1306_ADDR, I2C_WRITE);
 800098e:	2100      	movs	r1, #0
 8000990:	203c      	movs	r0, #60	@ 0x3c
 8000992:	f7ff ff0d 	bl	80007b0 <I2C1_start>
    I2C1_write(DATA);
 8000996:	2040      	movs	r0, #64	@ 0x40
 8000998:	f7ff ff36 	bl	8000808 <I2C1_write>
    I2C1_write(data);
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff32 	bl	8000808 <I2C1_write>
    I2C1_stop();
 80009a4:	f7ff ff50 	bl	8000848 <I2C1_stop>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <ssd1306_clear>:
    ssd1306_send_command(0xDB); ssd1306_send_command(0x40); // VCOM detect
    ssd1306_send_command(0x8D); ssd1306_send_command(0x14); // Charge pump
    ssd1306_send_command(0xAF); // Display ON
}

void ssd1306_clear(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++) {
 80009b6:	2300      	movs	r3, #0
 80009b8:	71fb      	strb	r3, [r7, #7]
 80009ba:	e01b      	b.n	80009f4 <ssd1306_clear+0x44>
        ssd1306_send_command(0xB0 + page); // Set page start
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	3b50      	subs	r3, #80	@ 0x50
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ffc8 	bl	8000958 <ssd1306_send_command>
        ssd1306_send_command(0x00); // Low col
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff ffc5 	bl	8000958 <ssd1306_send_command>
        ssd1306_send_command(0x10); // High col
 80009ce:	2010      	movs	r0, #16
 80009d0:	f7ff ffc2 	bl	8000958 <ssd1306_send_command>

        for (uint8_t col = 0; col < 128; col++) {
 80009d4:	2300      	movs	r3, #0
 80009d6:	71bb      	strb	r3, [r7, #6]
 80009d8:	e005      	b.n	80009e6 <ssd1306_clear+0x36>
            ssd1306_send_data(0x00); // Clear pixel
 80009da:	2000      	movs	r0, #0
 80009dc:	f7ff ffd2 	bl	8000984 <ssd1306_send_data>
        for (uint8_t col = 0; col < 128; col++) {
 80009e0:	79bb      	ldrb	r3, [r7, #6]
 80009e2:	3301      	adds	r3, #1
 80009e4:	71bb      	strb	r3, [r7, #6]
 80009e6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	daf5      	bge.n	80009da <ssd1306_clear+0x2a>
    for (uint8_t page = 0; page < 8; page++) {
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	3301      	adds	r3, #1
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	2b07      	cmp	r3, #7
 80009f8:	d9e0      	bls.n	80009bc <ssd1306_clear+0xc>
        }
    }
}
 80009fa:	bf00      	nop
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <ssd1306_display_sensor_data>:

void ssd1306_display_sensor_data(const char *line1, const char *line2) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
    ssd1306_clear();
 8000a0e:	f7ff ffcf 	bl	80009b0 <ssd1306_clear>
    ssd1306_draw_string(0, 0, line1);  // draw first line on page 0
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	2100      	movs	r1, #0
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff ff80 	bl	800091c <ssd1306_draw_string>
    ssd1306_draw_string(0, 1, line2);  // draw second line on page 1
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	2101      	movs	r1, #1
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff ff7b 	bl	800091c <ssd1306_draw_string>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <UART2_Init>:
 *  Created on: May 22, 2025
 *      Author: sandeep
 */
#include "stm32f4xx.h"

void UART2_Init(void) {
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
    RCC->AHB1ENR  |= RCC_AHB1ENR_GPIOAEN;
 8000a34:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <UART2_Init+0x58>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a38:	4a13      	ldr	r2, [pc, #76]	@ (8000a88 <UART2_Init+0x58>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR  |= RCC_APB1ENR_USART2EN;
 8000a40:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <UART2_Init+0x58>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a44:	4a10      	ldr	r2, [pc, #64]	@ (8000a88 <UART2_Init+0x58>)
 8000a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a4a:	6413      	str	r3, [r2, #64]	@ 0x40

    // PA2 = TX, PA3 = RX
    GPIOA->MODER  |=  (0b10 << (2 * 2)) | (0b10 << (2 * 3)); // Alternate function
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <UART2_Init+0x5c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0e      	ldr	r2, [pc, #56]	@ (8000a8c <UART2_Init+0x5c>)
 8000a52:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000a56:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |=  (7 << (4 * 2)) | (7 << (4 * 3));       // AF7 = USART2
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <UART2_Init+0x5c>)
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000a8c <UART2_Init+0x5c>)
 8000a5e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000a62:	6213      	str	r3, [r2, #32]

    USART2->BRR   = 16000000 / 9600; // Assuming 16 MHz clock
 8000a64:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <UART2_Init+0x60>)
 8000a66:	f240 6282 	movw	r2, #1666	@ 0x682
 8000a6a:	609a      	str	r2, [r3, #8]
    USART2->CR1  |= USART_CR1_TE | USART_CR1_UE; // Transmit enable, UART enable
 8000a6c:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <UART2_Init+0x60>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	4a07      	ldr	r2, [pc, #28]	@ (8000a90 <UART2_Init+0x60>)
 8000a72:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a76:	f043 0308 	orr.w	r3, r3, #8
 8000a7a:	60d3      	str	r3, [r2, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	40004400 	.word	0x40004400

08000a94 <UART2_SendChar>:

void UART2_SendChar(char c) {
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE));
 8000a9e:	bf00      	nop
 8000aa0:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <UART2_SendChar+0x2c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d0f9      	beq.n	8000aa0 <UART2_SendChar+0xc>
    USART2->DR = c;
 8000aac:	4a04      	ldr	r2, [pc, #16]	@ (8000ac0 <UART2_SendChar+0x2c>)
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	6053      	str	r3, [r2, #4]
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40004400 	.word	0x40004400

08000ac4 <UART2_SendString>:

void UART2_SendString(const char *str) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000acc:	e006      	b.n	8000adc <UART2_SendString+0x18>
        UART2_SendChar(*str++);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ffdc 	bl	8000a94 <UART2_SendChar>
    while (*str) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d1f4      	bne.n	8000ace <UART2_SendString+0xa>
    }
}
 8000ae4:	bf00      	nop
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <UART2_ReceiveChar>:

char UART2_ReceiveChar(void) {
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
    while (!(USART2->SR & USART_SR_RXNE));  // Wait until RX is not empty
 8000af4:	bf00      	nop
 8000af6:	4b07      	ldr	r3, [pc, #28]	@ (8000b14 <UART2_ReceiveChar+0x24>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f003 0320 	and.w	r3, r3, #32
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d0f9      	beq.n	8000af6 <UART2_ReceiveChar+0x6>
    return USART2->DR;                      // Read received character
 8000b02:	4b04      	ldr	r3, [pc, #16]	@ (8000b14 <UART2_ReceiveChar+0x24>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	b2db      	uxtb	r3, r3
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40004400 	.word	0x40004400

08000b18 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b1c:	f3bf 8f4f 	dsb	sy
}
 8000b20:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <__NVIC_SystemReset+0x24>)
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000b2a:	4904      	ldr	r1, [pc, #16]	@ (8000b3c <__NVIC_SystemReset+0x24>)
 8000b2c:	4b04      	ldr	r3, [pc, #16]	@ (8000b40 <__NVIC_SystemReset+0x28>)
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b32:	f3bf 8f4f 	dsb	sy
}
 8000b36:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <__NVIC_SystemReset+0x20>
 8000b3c:	e000ed00 	.word	0xe000ed00
 8000b40:	05fa0004 	.word	0x05fa0004

08000b44 <handle_cli_command>:
#include "output_control.h"
#include "ssd1306.h"
#include "uart.h"
#include "info.h"

void handle_cli_command(char *cmd) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
    if (strncmp(cmd, "oled dht11", 10) == 0) {
 8000b4c:	220a      	movs	r2, #10
 8000b4e:	4946      	ldr	r1, [pc, #280]	@ (8000c68 <handle_cli_command+0x124>)
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f002 f81d 	bl	8002b90 <strncmp>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d106      	bne.n	8000b6a <handle_cli_command+0x26>
        dht11_output = OUTPUT_OLED;
 8000b5c:	4b43      	ldr	r3, [pc, #268]	@ (8000c6c <handle_cli_command+0x128>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
        UART2_SendString("DHT11 redirected to OLED\r\n");
 8000b62:	4843      	ldr	r0, [pc, #268]	@ (8000c70 <handle_cli_command+0x12c>)
 8000b64:	f7ff ffae 	bl	8000ac4 <UART2_SendString>
        hcsr501_output = OUTPUT_UART;
        UART2_SendString("OLED cleared. All sensors set to UART.\r\n");
    } else {
    	UART2_SendString("Unknown command\r\n");
    }
}
 8000b68:	e07a      	b.n	8000c60 <handle_cli_command+0x11c>
    } else if (strncmp(cmd, "uart dht11", 10) == 0) {
 8000b6a:	220a      	movs	r2, #10
 8000b6c:	4941      	ldr	r1, [pc, #260]	@ (8000c74 <handle_cli_command+0x130>)
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f002 f80e 	bl	8002b90 <strncmp>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d106      	bne.n	8000b88 <handle_cli_command+0x44>
        dht11_output = OUTPUT_UART;
 8000b7a:	4b3c      	ldr	r3, [pc, #240]	@ (8000c6c <handle_cli_command+0x128>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
        UART2_SendString("DHT11 redirected to UART\r\n");
 8000b80:	483d      	ldr	r0, [pc, #244]	@ (8000c78 <handle_cli_command+0x134>)
 8000b82:	f7ff ff9f 	bl	8000ac4 <UART2_SendString>
}
 8000b86:	e06b      	b.n	8000c60 <handle_cli_command+0x11c>
    } else if (strncmp(cmd, "oled hcsr04", 11) == 0) {
 8000b88:	220b      	movs	r2, #11
 8000b8a:	493c      	ldr	r1, [pc, #240]	@ (8000c7c <handle_cli_command+0x138>)
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f001 ffff 	bl	8002b90 <strncmp>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d106      	bne.n	8000ba6 <handle_cli_command+0x62>
        hcsr04_output = OUTPUT_OLED;
 8000b98:	4b39      	ldr	r3, [pc, #228]	@ (8000c80 <handle_cli_command+0x13c>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]
        UART2_SendString("HC-SR04 redirected to OLED\r\n");
 8000b9e:	4839      	ldr	r0, [pc, #228]	@ (8000c84 <handle_cli_command+0x140>)
 8000ba0:	f7ff ff90 	bl	8000ac4 <UART2_SendString>
}
 8000ba4:	e05c      	b.n	8000c60 <handle_cli_command+0x11c>
    } else if (strncmp(cmd, "uart hcsr04", 11) == 0) {
 8000ba6:	220b      	movs	r2, #11
 8000ba8:	4937      	ldr	r1, [pc, #220]	@ (8000c88 <handle_cli_command+0x144>)
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f001 fff0 	bl	8002b90 <strncmp>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d106      	bne.n	8000bc4 <handle_cli_command+0x80>
        hcsr04_output = OUTPUT_UART;
 8000bb6:	4b32      	ldr	r3, [pc, #200]	@ (8000c80 <handle_cli_command+0x13c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
        UART2_SendString("HC-SR04 redirected to UART\r\n");
 8000bbc:	4833      	ldr	r0, [pc, #204]	@ (8000c8c <handle_cli_command+0x148>)
 8000bbe:	f7ff ff81 	bl	8000ac4 <UART2_SendString>
}
 8000bc2:	e04d      	b.n	8000c60 <handle_cli_command+0x11c>
    } else if (strncmp(cmd, "oled pir", 8) == 0) {
 8000bc4:	2208      	movs	r2, #8
 8000bc6:	4932      	ldr	r1, [pc, #200]	@ (8000c90 <handle_cli_command+0x14c>)
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f001 ffe1 	bl	8002b90 <strncmp>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d106      	bne.n	8000be2 <handle_cli_command+0x9e>
        hcsr501_output = OUTPUT_OLED;
 8000bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8000c94 <handle_cli_command+0x150>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
        UART2_SendString("PIR redirected to OLED\r\n");
 8000bda:	482f      	ldr	r0, [pc, #188]	@ (8000c98 <handle_cli_command+0x154>)
 8000bdc:	f7ff ff72 	bl	8000ac4 <UART2_SendString>
}
 8000be0:	e03e      	b.n	8000c60 <handle_cli_command+0x11c>
    } else if (strncmp(cmd, "uart pir", 8) == 0) {
 8000be2:	2208      	movs	r2, #8
 8000be4:	492d      	ldr	r1, [pc, #180]	@ (8000c9c <handle_cli_command+0x158>)
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f001 ffd2 	bl	8002b90 <strncmp>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d106      	bne.n	8000c00 <handle_cli_command+0xbc>
        hcsr501_output = OUTPUT_UART;
 8000bf2:	4b28      	ldr	r3, [pc, #160]	@ (8000c94 <handle_cli_command+0x150>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
        UART2_SendString("PIR redirected to UART\r\n");
 8000bf8:	4829      	ldr	r0, [pc, #164]	@ (8000ca0 <handle_cli_command+0x15c>)
 8000bfa:	f7ff ff63 	bl	8000ac4 <UART2_SendString>
}
 8000bfe:	e02f      	b.n	8000c60 <handle_cli_command+0x11c>
    } else if (strcmp(cmd, "reboot") == 0) {
 8000c00:	4928      	ldr	r1, [pc, #160]	@ (8000ca4 <handle_cli_command+0x160>)
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff fb04 	bl	8000210 <strcmp>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d104      	bne.n	8000c18 <handle_cli_command+0xd4>
        UART2_SendString("System rebooting...\r\n");
 8000c0e:	4826      	ldr	r0, [pc, #152]	@ (8000ca8 <handle_cli_command+0x164>)
 8000c10:	f7ff ff58 	bl	8000ac4 <UART2_SendString>
        NVIC_SystemReset();  // Built-in CMSIS function to trigger a software reset
 8000c14:	f7ff ff80 	bl	8000b18 <__NVIC_SystemReset>
    } else if (strcmp(cmd, "help") == 0) {
 8000c18:	4924      	ldr	r1, [pc, #144]	@ (8000cac <handle_cli_command+0x168>)
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff faf8 	bl	8000210 <strcmp>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d102      	bne.n	8000c2c <handle_cli_command+0xe8>
    	DisplayHelp();
 8000c26:	f000 fa6f 	bl	8001108 <DisplayHelp>
}
 8000c2a:	e019      	b.n	8000c60 <handle_cli_command+0x11c>
    } else if (strncmp(cmd, "oled off", 8) == 0) {
 8000c2c:	2208      	movs	r2, #8
 8000c2e:	4920      	ldr	r1, [pc, #128]	@ (8000cb0 <handle_cli_command+0x16c>)
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f001 ffad 	bl	8002b90 <strncmp>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d10e      	bne.n	8000c5a <handle_cli_command+0x116>
    	ssd1306_clear();
 8000c3c:	f7ff feb8 	bl	80009b0 <ssd1306_clear>
        dht11_output = OUTPUT_UART;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <handle_cli_command+0x128>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
        hcsr04_output = OUTPUT_UART;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <handle_cli_command+0x13c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
        hcsr501_output = OUTPUT_UART;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <handle_cli_command+0x150>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
        UART2_SendString("OLED cleared. All sensors set to UART.\r\n");
 8000c52:	4818      	ldr	r0, [pc, #96]	@ (8000cb4 <handle_cli_command+0x170>)
 8000c54:	f7ff ff36 	bl	8000ac4 <UART2_SendString>
}
 8000c58:	e002      	b.n	8000c60 <handle_cli_command+0x11c>
    	UART2_SendString("Unknown command\r\n");
 8000c5a:	4817      	ldr	r0, [pc, #92]	@ (8000cb8 <handle_cli_command+0x174>)
 8000c5c:	f7ff ff32 	bl	8000ac4 <UART2_SendString>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	080034b8 	.word	0x080034b8
 8000c6c:	200002dc 	.word	0x200002dc
 8000c70:	080034c4 	.word	0x080034c4
 8000c74:	080034e0 	.word	0x080034e0
 8000c78:	080034ec 	.word	0x080034ec
 8000c7c:	08003508 	.word	0x08003508
 8000c80:	200002dd 	.word	0x200002dd
 8000c84:	08003514 	.word	0x08003514
 8000c88:	08003534 	.word	0x08003534
 8000c8c:	08003540 	.word	0x08003540
 8000c90:	08003560 	.word	0x08003560
 8000c94:	200002de 	.word	0x200002de
 8000c98:	0800356c 	.word	0x0800356c
 8000c9c:	08003588 	.word	0x08003588
 8000ca0:	08003594 	.word	0x08003594
 8000ca4:	080035b0 	.word	0x080035b0
 8000ca8:	080035b8 	.word	0x080035b8
 8000cac:	080035d0 	.word	0x080035d0
 8000cb0:	080035d8 	.word	0x080035d8
 8000cb4:	080035e4 	.word	0x080035e4
 8000cb8:	08003610 	.word	0x08003610

08000cbc <vTask_DHT11>:
 * vTask_DHT11:
 * Task continuously reads data from the DHT11 sensor.
 * On successful read, updates global variables and outputs
 * data either on UART terminal or OLED display.
 */
void vTask_DHT11(void *params) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b0a6      	sub	sp, #152	@ 0x98
 8000cc0:	af02      	add	r7, sp, #8
 8000cc2:	6078      	str	r0, [r7, #4]
    DHT11_Data sensor_data;   // Struct to hold raw DHT11 readings and validity
    char msg[64];            // Buffer for UART output string
    char line1[32], line2[32];  // Strings for OLED display lines

    DHT11_Init();  // Initialize DHT11 sensor GPIO and settings
 8000cc4:	f7ff fb42 	bl	800034c <DHT11_Init>
    UART2_SendString("DHT11 Task Started\r\n");
 8000cc8:	4834      	ldr	r0, [pc, #208]	@ (8000d9c <vTask_DHT11+0xe0>)
 8000cca:	f7ff fefb 	bl	8000ac4 <UART2_SendString>

    while (1) {
        // Attempt to read data from DHT11 sensor
        if (DHT11_Read(&sensor_data) && sensor_data.valid) {
 8000cce:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fbc8 	bl	8000468 <DHT11_Read>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d045      	beq.n	8000d6a <vTask_DHT11+0xae>
 8000cde:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d041      	beq.n	8000d6a <vTask_DHT11+0xae>
            // Update global temperature and humidity with latest readings
            dht_temp = sensor_data.temperature;
 8000ce6:	f897 208c 	ldrb.w	r2, [r7, #140]	@ 0x8c
 8000cea:	4b2d      	ldr	r3, [pc, #180]	@ (8000da0 <vTask_DHT11+0xe4>)
 8000cec:	701a      	strb	r2, [r3, #0]
            dht_hum  = sensor_data.humidity;
 8000cee:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 8000cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8000da4 <vTask_DHT11+0xe8>)
 8000cf4:	701a      	strb	r2, [r3, #0]

            // Output based on selected mode
            if (dht11_output == OUTPUT_UART) {
 8000cf6:	4b2c      	ldr	r3, [pc, #176]	@ (8000da8 <vTask_DHT11+0xec>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d114      	bne.n	8000d2a <vTask_DHT11+0x6e>
                // Format temperature and humidity for UART terminal
                snprintf(msg, sizeof(msg), "Temperature: %d°C, Humidity: %d%%\r\n",
 8000d00:	4b27      	ldr	r3, [pc, #156]	@ (8000da0 <vTask_DHT11+0xe4>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b26      	ldr	r3, [pc, #152]	@ (8000da4 <vTask_DHT11+0xe8>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	4613      	mov	r3, r2
 8000d16:	4a25      	ldr	r2, [pc, #148]	@ (8000dac <vTask_DHT11+0xf0>)
 8000d18:	2140      	movs	r1, #64	@ 0x40
 8000d1a:	f001 fefb 	bl	8002b14 <sniprintf>
                         dht_temp, dht_hum);
                UART2_SendString(msg);
 8000d1e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fece 	bl	8000ac4 <UART2_SendString>
            if (dht11_output == OUTPUT_UART) {
 8000d28:	e032      	b.n	8000d90 <vTask_DHT11+0xd4>
            } else if (dht11_output == OUTPUT_OLED) {
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000da8 <vTask_DHT11+0xec>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d12d      	bne.n	8000d90 <vTask_DHT11+0xd4>
                // Prepare display lines for OLED screen
                snprintf(line1, sizeof(line1), "Temp: %d C", dht_temp);
 8000d34:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <vTask_DHT11+0xe4>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8000db0 <vTask_DHT11+0xf4>)
 8000d40:	2120      	movs	r1, #32
 8000d42:	f001 fee7 	bl	8002b14 <sniprintf>
                snprintf(line2, sizeof(line2), "Hum:  %d %%", dht_hum);
 8000d46:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <vTask_DHT11+0xe8>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	f107 000c 	add.w	r0, r7, #12
 8000d50:	4a18      	ldr	r2, [pc, #96]	@ (8000db4 <vTask_DHT11+0xf8>)
 8000d52:	2120      	movs	r1, #32
 8000d54:	f001 fede 	bl	8002b14 <sniprintf>
                ssd1306_display_sensor_data(line1, line2);
 8000d58:	f107 020c 	add.w	r2, r7, #12
 8000d5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fe4e 	bl	8000a04 <ssd1306_display_sensor_data>
            if (dht11_output == OUTPUT_UART) {
 8000d68:	e012      	b.n	8000d90 <vTask_DHT11+0xd4>
            }
        } else {
            // Handle failed sensor read with error messages
            if (dht11_output == OUTPUT_UART) {
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <vTask_DHT11+0xec>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d103      	bne.n	8000d7c <vTask_DHT11+0xc0>
                UART2_SendString("DHT11 Read Failed!\r\n");
 8000d74:	4810      	ldr	r0, [pc, #64]	@ (8000db8 <vTask_DHT11+0xfc>)
 8000d76:	f7ff fea5 	bl	8000ac4 <UART2_SendString>
 8000d7a:	e00a      	b.n	8000d92 <vTask_DHT11+0xd6>
            } else if (dht11_output == OUTPUT_OLED) {
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <vTask_DHT11+0xec>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d105      	bne.n	8000d92 <vTask_DHT11+0xd6>
                ssd1306_display_sensor_data("DHT11 Error", "Read Failed");
 8000d86:	490d      	ldr	r1, [pc, #52]	@ (8000dbc <vTask_DHT11+0x100>)
 8000d88:	480d      	ldr	r0, [pc, #52]	@ (8000dc0 <vTask_DHT11+0x104>)
 8000d8a:	f7ff fe3b 	bl	8000a04 <ssd1306_display_sensor_data>
 8000d8e:	e000      	b.n	8000d92 <vTask_DHT11+0xd6>
            if (dht11_output == OUTPUT_UART) {
 8000d90:	bf00      	nop
            }
        }

        // Delay 1 second before next read to comply with sensor timing specs
        vTaskDelay(pdMS_TO_TICKS(1000));
 8000d92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d96:	f000 ff03 	bl	8001ba0 <vTaskDelay>
        if (DHT11_Read(&sensor_data) && sensor_data.valid) {
 8000d9a:	e798      	b.n	8000cce <vTask_DHT11+0x12>
 8000d9c:	08003624 	.word	0x08003624
 8000da0:	20000074 	.word	0x20000074
 8000da4:	20000075 	.word	0x20000075
 8000da8:	200002dc 	.word	0x200002dc
 8000dac:	0800363c 	.word	0x0800363c
 8000db0:	08003664 	.word	0x08003664
 8000db4:	08003670 	.word	0x08003670
 8000db8:	0800367c 	.word	0x0800367c
 8000dbc:	08003694 	.word	0x08003694
 8000dc0:	080036a0 	.word	0x080036a0

08000dc4 <vTask_HCSR04>:
 * vTask_HCSR04:
 * Periodically reads distance from the HC-SR04 sensor.
 * If a valid distance is returned, it displays the result
 * on either UART or SSD1306 OLED display, depending on the user's choice.
 */
void vTask_HCSR04(void *params) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0a4      	sub	sp, #144	@ 0x90
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
    char line1[32];     // OLED Line 1 text
    char line2[32];     // OLED Line 2 text
    uint32_t distance;  // Distance measurement in cm

    // Initialize the ultrasonic sensor (trig on PA6, echo on PA7)
    HC_SR04_Init();
 8000dcc:	f7ff fc38 	bl	8000640 <HC_SR04_Init>
    UART2_SendString("HC-SR04 Task Started\r\n");
 8000dd0:	4828      	ldr	r0, [pc, #160]	@ (8000e74 <vTask_HCSR04+0xb0>)
 8000dd2:	f7ff fe77 	bl	8000ac4 <UART2_SendString>

    while (1) {
        // Read distance from HC-SR04 (blocking or delay-based internally)
        distance = HC_SR04_ReadDistance();
 8000dd6:	f7ff fc79 	bl	80006cc <HC_SR04_ReadDistance>
 8000dda:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

        // If distance > 0, we assume the reading is valid
        if (distance > 0) {
 8000dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d02f      	beq.n	8000e46 <vTask_HCSR04+0x82>
            if (hcsr04_output == OUTPUT_UART) {
 8000de6:	4b24      	ldr	r3, [pc, #144]	@ (8000e78 <vTask_HCSR04+0xb4>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d10d      	bne.n	8000e0c <vTask_HCSR04+0x48>
                // Format and send distance to UART terminal
                snprintf(msg, sizeof(msg), "Distance: %lu cm\r\n", distance);
 8000df0:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000df4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000df8:	4a20      	ldr	r2, [pc, #128]	@ (8000e7c <vTask_HCSR04+0xb8>)
 8000dfa:	2140      	movs	r1, #64	@ 0x40
 8000dfc:	f001 fe8a 	bl	8002b14 <sniprintf>
                UART2_SendString(msg);
 8000e00:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fe5d 	bl	8000ac4 <UART2_SendString>
 8000e0a:	e02e      	b.n	8000e6a <vTask_HCSR04+0xa6>
            } else if (hcsr04_output == OUTPUT_OLED) {
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <vTask_HCSR04+0xb4>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d129      	bne.n	8000e6a <vTask_HCSR04+0xa6>
                // Format and display distance on OLED screen
                snprintf(line1, sizeof(line1), "HC-SR04:");
 8000e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e1a:	4a19      	ldr	r2, [pc, #100]	@ (8000e80 <vTask_HCSR04+0xbc>)
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 fe78 	bl	8002b14 <sniprintf>
                snprintf(line2, sizeof(line2), "%lu cm", distance);
 8000e24:	f107 000c 	add.w	r0, r7, #12
 8000e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000e2c:	4a15      	ldr	r2, [pc, #84]	@ (8000e84 <vTask_HCSR04+0xc0>)
 8000e2e:	2120      	movs	r1, #32
 8000e30:	f001 fe70 	bl	8002b14 <sniprintf>
                ssd1306_display_sensor_data(line1, line2);
 8000e34:	f107 020c 	add.w	r2, r7, #12
 8000e38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fde0 	bl	8000a04 <ssd1306_display_sensor_data>
 8000e44:	e011      	b.n	8000e6a <vTask_HCSR04+0xa6>
            }
        } else {
            // Handle invalid or failed reading
            if (hcsr04_output == OUTPUT_UART) {
 8000e46:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <vTask_HCSR04+0xb4>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d103      	bne.n	8000e58 <vTask_HCSR04+0x94>
                UART2_SendString("Distance read error!\r\n");
 8000e50:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <vTask_HCSR04+0xc4>)
 8000e52:	f7ff fe37 	bl	8000ac4 <UART2_SendString>
 8000e56:	e008      	b.n	8000e6a <vTask_HCSR04+0xa6>
            } else if (hcsr04_output == OUTPUT_OLED) {
 8000e58:	4b07      	ldr	r3, [pc, #28]	@ (8000e78 <vTask_HCSR04+0xb4>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d103      	bne.n	8000e6a <vTask_HCSR04+0xa6>
                ssd1306_display_sensor_data("HC-SR04 Error", "Read Failed");
 8000e62:	490a      	ldr	r1, [pc, #40]	@ (8000e8c <vTask_HCSR04+0xc8>)
 8000e64:	480a      	ldr	r0, [pc, #40]	@ (8000e90 <vTask_HCSR04+0xcc>)
 8000e66:	f7ff fdcd 	bl	8000a04 <ssd1306_display_sensor_data>
            }
        }

        // Delay task for 2 seconds to control update frequency
        vTaskDelay(pdMS_TO_TICKS(2000));
 8000e6a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e6e:	f000 fe97 	bl	8001ba0 <vTaskDelay>
        distance = HC_SR04_ReadDistance();
 8000e72:	e7b0      	b.n	8000dd6 <vTask_HCSR04+0x12>
 8000e74:	080036ac 	.word	0x080036ac
 8000e78:	200002dd 	.word	0x200002dd
 8000e7c:	080036c4 	.word	0x080036c4
 8000e80:	080036d8 	.word	0x080036d8
 8000e84:	080036e4 	.word	0x080036e4
 8000e88:	080036ec 	.word	0x080036ec
 8000e8c:	08003704 	.word	0x08003704
 8000e90:	08003710 	.word	0x08003710

08000e94 <vTask_HCSR501>:
 * vTask_HCSR501:
 * This task polls the PIR motion sensor connected to PB13.
 * On motion detection, it activates a buzzer (PA9) and displays
 * output either via UART or SSD1306 OLED based on user CLI selection.
 */
void vTask_HCSR501(void *pvParameters) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
    HCSR501_Init();  // Configure PB13 as input with pull-down for PIR sensor
 8000e9c:	f7ff fc64 	bl	8000768 <HCSR501_Init>

    while (1) {
        // Read motion sensor value: HIGH = motion, LOW = no motion
        uint8_t motion_detected = (GPIOB->IDR & (1 << 13)) ? 1 : 0;
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <vTask_HCSR501+0x84>)
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	bf14      	ite	ne
 8000eac:	2301      	movne	r3, #1
 8000eae:	2300      	moveq	r3, #0
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	73fb      	strb	r3, [r7, #15]

        if (motion_detected) {
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d014      	beq.n	8000ee4 <vTask_HCSR501+0x50>
            Buzzer_On();  // Trigger alert via buzzer (active-high on PA9)
 8000eba:	f7ff fba1 	bl	8000600 <Buzzer_On>

            // Output notification to UART or OLED
            if (hcsr501_output == OUTPUT_UART) {
 8000ebe:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <vTask_HCSR501+0x88>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d103      	bne.n	8000ed0 <vTask_HCSR501+0x3c>
                UART2_SendString("Motion Detected!\r\n");
 8000ec8:	4815      	ldr	r0, [pc, #84]	@ (8000f20 <vTask_HCSR501+0x8c>)
 8000eca:	f7ff fdfb 	bl	8000ac4 <UART2_SendString>
 8000ece:	e01d      	b.n	8000f0c <vTask_HCSR501+0x78>
            } else if (hcsr501_output == OUTPUT_OLED) {
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <vTask_HCSR501+0x88>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d118      	bne.n	8000f0c <vTask_HCSR501+0x78>
                ssd1306_display_sensor_data("PIR Sensor", "Motion Detected!");
 8000eda:	4912      	ldr	r1, [pc, #72]	@ (8000f24 <vTask_HCSR501+0x90>)
 8000edc:	4812      	ldr	r0, [pc, #72]	@ (8000f28 <vTask_HCSR501+0x94>)
 8000ede:	f7ff fd91 	bl	8000a04 <ssd1306_display_sensor_data>
 8000ee2:	e013      	b.n	8000f0c <vTask_HCSR501+0x78>
            }
        } else {
            Buzzer_Off();  // Stop buzzer if no motion
 8000ee4:	f7ff fb9c 	bl	8000620 <Buzzer_Off>

            if (hcsr501_output == OUTPUT_UART) {
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <vTask_HCSR501+0x88>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d103      	bne.n	8000efa <vTask_HCSR501+0x66>
                UART2_SendString("No motion.\r\n");
 8000ef2:	480e      	ldr	r0, [pc, #56]	@ (8000f2c <vTask_HCSR501+0x98>)
 8000ef4:	f7ff fde6 	bl	8000ac4 <UART2_SendString>
 8000ef8:	e008      	b.n	8000f0c <vTask_HCSR501+0x78>
            } else if (hcsr501_output == OUTPUT_OLED) {
 8000efa:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <vTask_HCSR501+0x88>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d103      	bne.n	8000f0c <vTask_HCSR501+0x78>
                ssd1306_display_sensor_data("PIR Sensor", "No Motion");
 8000f04:	490a      	ldr	r1, [pc, #40]	@ (8000f30 <vTask_HCSR501+0x9c>)
 8000f06:	4808      	ldr	r0, [pc, #32]	@ (8000f28 <vTask_HCSR501+0x94>)
 8000f08:	f7ff fd7c 	bl	8000a04 <ssd1306_display_sensor_data>
            }
        }

        // Delay 1.5 seconds between polls to reduce processing load
        vTaskDelay(pdMS_TO_TICKS(1500));
 8000f0c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000f10:	f000 fe46 	bl	8001ba0 <vTaskDelay>
    while (1) {
 8000f14:	e7c4      	b.n	8000ea0 <vTask_HCSR501+0xc>
 8000f16:	bf00      	nop
 8000f18:	40020400 	.word	0x40020400
 8000f1c:	200002de 	.word	0x200002de
 8000f20:	08003720 	.word	0x08003720
 8000f24:	08003734 	.word	0x08003734
 8000f28:	08003748 	.word	0x08003748
 8000f2c:	08003754 	.word	0x08003754
 8000f30:	08003764 	.word	0x08003764

08000f34 <vTask_LED>:
#include "uart.h"

//Task Functions Declarations
void vTask_LED(void *argument);

void vTask_LED(void *argument) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	UART2_SendString("Led Task Powered Up...\r\n");
 8000f3c:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <vTask_LED+0x20>)
 8000f3e:	f7ff fdc1 	bl	8000ac4 <UART2_SendString>
    while (1) {
        LED_Toggle();
 8000f42:	f7ff fb4d 	bl	80005e0 <LED_Toggle>
        vTaskDelay(pdMS_TO_TICKS(500));
 8000f46:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f4a:	f000 fe29 	bl	8001ba0 <vTaskDelay>
        LED_Toggle();
 8000f4e:	bf00      	nop
 8000f50:	e7f7      	b.n	8000f42 <vTask_LED+0xe>
 8000f52:	bf00      	nop
 8000f54:	08003770 	.word	0x08003770

08000f58 <vTask_UART>:
 * vTask_UART:
 * FreeRTOS task responsible for CLI command reception and dispatch.
 * It reads characters over UART2, handles simple line editing,
 * and invokes the command handler on newline.
 */
void vTask_UART(void *pvParameters) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b094      	sub	sp, #80	@ 0x50
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    char cli_buffer[CLI_BUFFER_SIZE];  // Buffer to store the command string
    int idx = 0;                       // Index for buffer filling
 8000f60:	2300      	movs	r3, #0
 8000f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
    char c;

    UART2_SendString("\r\n>> ");  // Initial CLI prompt on boot
 8000f64:	4829      	ldr	r0, [pc, #164]	@ (800100c <vTask_UART+0xb4>)
 8000f66:	f7ff fdad 	bl	8000ac4 <UART2_SendString>

    while (1) {
        c = UART2_ReceiveChar();  // Blocking call - waits for character
 8000f6a:	f7ff fdc1 	bl	8000af0 <UART2_ReceiveChar>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        UART2_SendChar(c);        // Echo back for user feedback
 8000f74:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fd8b 	bl	8000a94 <UART2_SendChar>

        if (c == '\r' || c == '\n') {  // Enter pressed
 8000f7e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000f82:	2b0d      	cmp	r3, #13
 8000f84:	d003      	beq.n	8000f8e <vTask_UART+0x36>
 8000f86:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000f8a:	2b0a      	cmp	r3, #10
 8000f8c:	d11a      	bne.n	8000fc4 <vTask_UART+0x6c>
            UART2_SendString("\r\n");
 8000f8e:	4820      	ldr	r0, [pc, #128]	@ (8001010 <vTask_UART+0xb8>)
 8000f90:	f7ff fd98 	bl	8000ac4 <UART2_SendString>

            if (idx > 0) {
 8000f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	dd10      	ble.n	8000fbc <vTask_UART+0x64>
                cli_buffer[idx] = '\0';  // Null-terminate input string
 8000f9a:	f107 0208 	add.w	r2, r7, #8
 8000f9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fa0:	4413      	add	r3, r2
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
                handle_cli_command(cli_buffer);  // Parse and execute command
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fdca 	bl	8000b44 <handle_cli_command>
                idx = 0;  // Reset buffer index after command execution
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                vTaskDelay(pdMS_TO_TICKS(500));  // Small delay to avoid bouncing
 8000fb4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fb8:	f000 fdf2 	bl	8001ba0 <vTaskDelay>
            }

            UART2_SendString(">> ");  // Show next prompt
 8000fbc:	4815      	ldr	r0, [pc, #84]	@ (8001014 <vTask_UART+0xbc>)
 8000fbe:	f7ff fd81 	bl	8000ac4 <UART2_SendString>
 8000fc2:	e022      	b.n	800100a <vTask_UART+0xb2>
        } else if (c == '\b' || c == 127) {  // Handle backspace/delete
 8000fc4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d003      	beq.n	8000fd4 <vTask_UART+0x7c>
 8000fcc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000fd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fd2:	d109      	bne.n	8000fe8 <vTask_UART+0x90>
            if (idx > 0) {
 8000fd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	dd17      	ble.n	800100a <vTask_UART+0xb2>
                idx--;  // Move buffer index back
 8000fda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
                UART2_SendString("\b \b");  // Erase character visually on terminal
 8000fe0:	480d      	ldr	r0, [pc, #52]	@ (8001018 <vTask_UART+0xc0>)
 8000fe2:	f7ff fd6f 	bl	8000ac4 <UART2_SendString>
            if (idx > 0) {
 8000fe6:	e010      	b.n	800100a <vTask_UART+0xb2>
            }
        } else if (idx < CLI_BUFFER_SIZE - 1) {  // Accept only if buffer isn't full
 8000fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fea:	2b3e      	cmp	r3, #62	@ 0x3e
 8000fec:	dcbd      	bgt.n	8000f6a <vTask_UART+0x12>
            cli_buffer[idx++] = c;  // Store character in buffer
 8000fee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000ff4:	3350      	adds	r3, #80	@ 0x50
 8000ff6:	443b      	add	r3, r7
 8000ff8:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8000ffc:	f803 2c48 	strb.w	r2, [r3, #-72]
            UART2_SendChar(c);      // Echo valid characters again (optional)
 8001000:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fd45 	bl	8000a94 <UART2_SendChar>
        c = UART2_ReceiveChar();  // Blocking call - waits for character
 800100a:	e7ae      	b.n	8000f6a <vTask_UART+0x12>
 800100c:	0800378c 	.word	0x0800378c
 8001010:	08003794 	.word	0x08003794
 8001014:	08003798 	.word	0x08003798
 8001018:	0800379c 	.word	0x0800379c

0800101c <StartDefaultTasks>:
/*
 * StartDefaultTasks:
 * Called from main.c to create all application tasks.
 * Each task is assigned a priority to ensure timing and responsiveness.
 */
void StartDefaultTasks(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af02      	add	r7, sp, #8
    UART2_SendString("Setting Up Tasks...\r\n");
 8001022:	481d      	ldr	r0, [pc, #116]	@ (8001098 <StartDefaultTasks+0x7c>)
 8001024:	f7ff fd4e 	bl	8000ac4 <UART2_SendString>

    // Task: LED Blink
    // Priority: 0 (lowest)
    // Purpose: Basic blinking to show system is alive
    xTaskCreate(vTask_LED, "LED", 128, NULL, 0, &ledTaskHandle);
 8001028:	4b1c      	ldr	r3, [pc, #112]	@ (800109c <StartDefaultTasks+0x80>)
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	2300      	movs	r3, #0
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2300      	movs	r3, #0
 8001032:	2280      	movs	r2, #128	@ 0x80
 8001034:	491a      	ldr	r1, [pc, #104]	@ (80010a0 <StartDefaultTasks+0x84>)
 8001036:	481b      	ldr	r0, [pc, #108]	@ (80010a4 <StartDefaultTasks+0x88>)
 8001038:	f000 fc73 	bl	8001922 <xTaskCreate>

    // Task: DHT11 Sensor Reading
    // Priority: 1 (low)
    // Purpose: Periodically read temperature and humidity
    xTaskCreate(vTask_DHT11, "DHT11", 256, NULL, 1, &dhtTaskHandle);
 800103c:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <StartDefaultTasks+0x8c>)
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	2301      	movs	r3, #1
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2300      	movs	r3, #0
 8001046:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800104a:	4918      	ldr	r1, [pc, #96]	@ (80010ac <StartDefaultTasks+0x90>)
 800104c:	4818      	ldr	r0, [pc, #96]	@ (80010b0 <StartDefaultTasks+0x94>)
 800104e:	f000 fc68 	bl	8001922 <xTaskCreate>

    // Task: HC-SR04 Ultrasonic Distance Sensor
    // Priority: 1 (low)
    // Purpose: Periodically measure distance
    xTaskCreate(vTask_HCSR04, "HC_SR04", 256, NULL, 1, NULL);
 8001052:	2300      	movs	r3, #0
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	2301      	movs	r3, #1
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2300      	movs	r3, #0
 800105c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001060:	4914      	ldr	r1, [pc, #80]	@ (80010b4 <StartDefaultTasks+0x98>)
 8001062:	4815      	ldr	r0, [pc, #84]	@ (80010b8 <StartDefaultTasks+0x9c>)
 8001064:	f000 fc5d 	bl	8001922 <xTaskCreate>

    // Task: HC-SR501 PIR Motion Sensor
    // Priority: 2 (medium)
    // Purpose: Monitor motion and control buzzer
    xTaskCreate(vTask_HCSR501, "PIR", 128, NULL, 2, &pirTaskHandle);
 8001068:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <StartDefaultTasks+0xa0>)
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	2302      	movs	r3, #2
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2300      	movs	r3, #0
 8001072:	2280      	movs	r2, #128	@ 0x80
 8001074:	4912      	ldr	r1, [pc, #72]	@ (80010c0 <StartDefaultTasks+0xa4>)
 8001076:	4813      	ldr	r0, [pc, #76]	@ (80010c4 <StartDefaultTasks+0xa8>)
 8001078:	f000 fc53 	bl	8001922 <xTaskCreate>

    // Task: UART CLI Handler
    // Priority: 3 (highest)
    // Purpose: Handle UART commands and output control (OLED/Terminal)
    xTaskCreate(vTask_UART, "UART", 128, NULL, 3, &uartTaskHandle);
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <StartDefaultTasks+0xac>)
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	2303      	movs	r3, #3
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2300      	movs	r3, #0
 8001086:	2280      	movs	r2, #128	@ 0x80
 8001088:	4910      	ldr	r1, [pc, #64]	@ (80010cc <StartDefaultTasks+0xb0>)
 800108a:	4811      	ldr	r0, [pc, #68]	@ (80010d0 <StartDefaultTasks+0xb4>)
 800108c:	f000 fc49 	bl	8001922 <xTaskCreate>
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	080037a0 	.word	0x080037a0
 800109c:	20000078 	.word	0x20000078
 80010a0:	080037b8 	.word	0x080037b8
 80010a4:	08000f35 	.word	0x08000f35
 80010a8:	2000007c 	.word	0x2000007c
 80010ac:	080037bc 	.word	0x080037bc
 80010b0:	08000cbd 	.word	0x08000cbd
 80010b4:	080037c4 	.word	0x080037c4
 80010b8:	08000dc5 	.word	0x08000dc5
 80010bc:	20000084 	.word	0x20000084
 80010c0:	080037cc 	.word	0x080037cc
 80010c4:	08000e95 	.word	0x08000e95
 80010c8:	20000080 	.word	0x20000080
 80010cc:	080037d0 	.word	0x080037d0
 80010d0:	08000f59 	.word	0x08000f59

080010d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4a07      	ldr	r2, [pc, #28]	@ (8001100 <vApplicationGetIdleTaskMemory+0x2c>)
 80010e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	4a06      	ldr	r2, [pc, #24]	@ (8001104 <vApplicationGetIdleTaskMemory+0x30>)
 80010ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2280      	movs	r2, #128	@ 0x80
 80010f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000088 	.word	0x20000088
 8001104:	200000dc 	.word	0x200000dc

08001108 <DisplayHelp>:

#include "uart.h"
#include "info.h"
#include "stdio.h"

void DisplayHelp(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
    UART2_SendString("\r\n===== SensoRTOS Command Help =====\r\n");
 800110c:	4811      	ldr	r0, [pc, #68]	@ (8001154 <DisplayHelp+0x4c>)
 800110e:	f7ff fcd9 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("help         : Show this help message\r\n");
 8001112:	4811      	ldr	r0, [pc, #68]	@ (8001158 <DisplayHelp+0x50>)
 8001114:	f7ff fcd6 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("reboot       : Reboot the system\r\n");
 8001118:	4810      	ldr	r0, [pc, #64]	@ (800115c <DisplayHelp+0x54>)
 800111a:	f7ff fcd3 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("oled dht11   : Redirect DHT11 output to OLED\r\n");
 800111e:	4810      	ldr	r0, [pc, #64]	@ (8001160 <DisplayHelp+0x58>)
 8001120:	f7ff fcd0 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("uart dht11   : Redirect DHT11 output to UART\r\n");
 8001124:	480f      	ldr	r0, [pc, #60]	@ (8001164 <DisplayHelp+0x5c>)
 8001126:	f7ff fccd 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("oled hcsr04  : Redirect HC-SR04 output to OLED\r\n");
 800112a:	480f      	ldr	r0, [pc, #60]	@ (8001168 <DisplayHelp+0x60>)
 800112c:	f7ff fcca 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("uart hcsr04  : Redirect HC-SR04 output to UART\r\n");
 8001130:	480e      	ldr	r0, [pc, #56]	@ (800116c <DisplayHelp+0x64>)
 8001132:	f7ff fcc7 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("oled pir     : Redirect PIR output to OLED\r\n");
 8001136:	480e      	ldr	r0, [pc, #56]	@ (8001170 <DisplayHelp+0x68>)
 8001138:	f7ff fcc4 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("uart pir     : Redirect PIR output to UART\r\n");
 800113c:	480d      	ldr	r0, [pc, #52]	@ (8001174 <DisplayHelp+0x6c>)
 800113e:	f7ff fcc1 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("oled off     : Clear OLED and set all outputs to UART\r\n");
 8001142:	480d      	ldr	r0, [pc, #52]	@ (8001178 <DisplayHelp+0x70>)
 8001144:	f7ff fcbe 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("===================================\r\n");
 8001148:	480c      	ldr	r0, [pc, #48]	@ (800117c <DisplayHelp+0x74>)
 800114a:	f7ff fcbb 	bl	8000ac4 <UART2_SendString>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	080037d8 	.word	0x080037d8
 8001158:	08003800 	.word	0x08003800
 800115c:	08003828 	.word	0x08003828
 8001160:	0800384c 	.word	0x0800384c
 8001164:	0800387c 	.word	0x0800387c
 8001168:	080038ac 	.word	0x080038ac
 800116c:	080038e0 	.word	0x080038e0
 8001170:	08003914 	.word	0x08003914
 8001174:	08003944 	.word	0x08003944
 8001178:	08003974 	.word	0x08003974
 800117c:	080039ac 	.word	0x080039ac

08001180 <DisplayProjectInfo>:


void DisplayProjectInfo(void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
    UART2_SendString("\r\n=============================\r\n");
 8001184:	4829      	ldr	r0, [pc, #164]	@ (800122c <DisplayProjectInfo+0xac>)
 8001186:	f7ff fc9d 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("      SensoRTOS Booting...\r\n");
 800118a:	4829      	ldr	r0, [pc, #164]	@ (8001230 <DisplayProjectInfo+0xb0>)
 800118c:	f7ff fc9a 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("  Smart RTOS based Sensor System with CLI\r\n");
 8001190:	4828      	ldr	r0, [pc, #160]	@ (8001234 <DisplayProjectInfo+0xb4>)
 8001192:	f7ff fc97 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("=============================\r\n");
 8001196:	4828      	ldr	r0, [pc, #160]	@ (8001238 <DisplayProjectInfo+0xb8>)
 8001198:	f7ff fc94 	bl	8000ac4 <UART2_SendString>

    UART2_SendString("Project     : SensoRTOS v1.0.0\r\n");
 800119c:	4827      	ldr	r0, [pc, #156]	@ (800123c <DisplayProjectInfo+0xbc>)
 800119e:	f7ff fc91 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("Board       : STM32F446RE (Nucleo-64)\r\n");
 80011a2:	4827      	ldr	r0, [pc, #156]	@ (8001240 <DisplayProjectInfo+0xc0>)
 80011a4:	f7ff fc8e 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("Clock       : 180 MHz System Clock\r\n");
 80011a8:	4826      	ldr	r0, [pc, #152]	@ (8001244 <DisplayProjectInfo+0xc4>)
 80011aa:	f7ff fc8b 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("RTOS        : FreeRTOS (Preemptive)\r\n");
 80011ae:	4826      	ldr	r0, [pc, #152]	@ (8001248 <DisplayProjectInfo+0xc8>)
 80011b0:	f7ff fc88 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("Tasks       : LED, DHT11, HC-SR04, HCSR501, UART\r\n");
 80011b4:	4825      	ldr	r0, [pc, #148]	@ (800124c <DisplayProjectInfo+0xcc>)
 80011b6:	f7ff fc85 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("Stack Size  : LED=128, DHT11=256, HCSR04=256, PIR=128, UART=128\r\n");
 80011ba:	4825      	ldr	r0, [pc, #148]	@ (8001250 <DisplayProjectInfo+0xd0>)
 80011bc:	f7ff fc82 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("Heap Size   : 15 KB (configTOTAL_HEAP_SIZE)\r\n");
 80011c0:	4824      	ldr	r0, [pc, #144]	@ (8001254 <DisplayProjectInfo+0xd4>)
 80011c2:	f7ff fc7f 	bl	8000ac4 <UART2_SendString>

    UART2_SendString("-----------------------------\r\n");
 80011c6:	4824      	ldr	r0, [pc, #144]	@ (8001258 <DisplayProjectInfo+0xd8>)
 80011c8:	f7ff fc7c 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("Peripherals:\r\n");
 80011cc:	4823      	ldr	r0, [pc, #140]	@ (800125c <DisplayProjectInfo+0xdc>)
 80011ce:	f7ff fc79 	bl	8000ac4 <UART2_SendString>
    UART2_SendString(" > USART2   : PA2 (TX), PA3 (RX) @ 9600 baud rate\r\n");
 80011d2:	4823      	ldr	r0, [pc, #140]	@ (8001260 <DisplayProjectInfo+0xe0>)
 80011d4:	f7ff fc76 	bl	8000ac4 <UART2_SendString>
    UART2_SendString(" > OLED     : I2C1 - PB8 (SCL), PB9 (SDA), Addr 0x3C\r\n");
 80011d8:	4822      	ldr	r0, [pc, #136]	@ (8001264 <DisplayProjectInfo+0xe4>)
 80011da:	f7ff fc73 	bl	8000ac4 <UART2_SendString>
    UART2_SendString(" > DHT11    : PB6 (Data pin)\r\n");
 80011de:	4822      	ldr	r0, [pc, #136]	@ (8001268 <DisplayProjectInfo+0xe8>)
 80011e0:	f7ff fc70 	bl	8000ac4 <UART2_SendString>
    UART2_SendString(" > HC-SR04  : PA6 (Trig), PA7 (Echo)\r\n");
 80011e4:	4821      	ldr	r0, [pc, #132]	@ (800126c <DisplayProjectInfo+0xec>)
 80011e6:	f7ff fc6d 	bl	8000ac4 <UART2_SendString>
    UART2_SendString(" > PIR      : PB13 (Input)\r\n");
 80011ea:	4821      	ldr	r0, [pc, #132]	@ (8001270 <DisplayProjectInfo+0xf0>)
 80011ec:	f7ff fc6a 	bl	8000ac4 <UART2_SendString>
    UART2_SendString(" > Buzzer   : PA9 (Output)\r\n");
 80011f0:	4820      	ldr	r0, [pc, #128]	@ (8001274 <DisplayProjectInfo+0xf4>)
 80011f2:	f7ff fc67 	bl	8000ac4 <UART2_SendString>

    UART2_SendString("-----------------------------\r\n");
 80011f6:	4818      	ldr	r0, [pc, #96]	@ (8001258 <DisplayProjectInfo+0xd8>)
 80011f8:	f7ff fc64 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("Sensors Used:\r\n");
 80011fc:	481e      	ldr	r0, [pc, #120]	@ (8001278 <DisplayProjectInfo+0xf8>)
 80011fe:	f7ff fc61 	bl	8000ac4 <UART2_SendString>
    UART2_SendString(" DHT11      : Temperature & Humidity Sensor\r\n");
 8001202:	481e      	ldr	r0, [pc, #120]	@ (800127c <DisplayProjectInfo+0xfc>)
 8001204:	f7ff fc5e 	bl	8000ac4 <UART2_SendString>
    UART2_SendString(" HC-SR04    : Ultrasonic Distance Measuring Sensor\r\n");
 8001208:	481d      	ldr	r0, [pc, #116]	@ (8001280 <DisplayProjectInfo+0x100>)
 800120a:	f7ff fc5b 	bl	8000ac4 <UART2_SendString>
    UART2_SendString(" HC-SR501   : Pyroelectric Infrared Motion Detection Sensor\r\n");
 800120e:	481d      	ldr	r0, [pc, #116]	@ (8001284 <DisplayProjectInfo+0x104>)
 8001210:	f7ff fc58 	bl	8000ac4 <UART2_SendString>

    UART2_SendString("-----------------------------\r\n");
 8001214:	4810      	ldr	r0, [pc, #64]	@ (8001258 <DisplayProjectInfo+0xd8>)
 8001216:	f7ff fc55 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("Author      : Sandeep\r\n");
 800121a:	481b      	ldr	r0, [pc, #108]	@ (8001288 <DisplayProjectInfo+0x108>)
 800121c:	f7ff fc52 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("=============================\r\n");
 8001220:	4805      	ldr	r0, [pc, #20]	@ (8001238 <DisplayProjectInfo+0xb8>)
 8001222:	f7ff fc4f 	bl	8000ac4 <UART2_SendString>
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	080039d4 	.word	0x080039d4
 8001230:	080039f8 	.word	0x080039f8
 8001234:	08003a18 	.word	0x08003a18
 8001238:	08003a44 	.word	0x08003a44
 800123c:	08003a64 	.word	0x08003a64
 8001240:	08003a88 	.word	0x08003a88
 8001244:	08003ab0 	.word	0x08003ab0
 8001248:	08003ad8 	.word	0x08003ad8
 800124c:	08003b00 	.word	0x08003b00
 8001250:	08003b34 	.word	0x08003b34
 8001254:	08003b78 	.word	0x08003b78
 8001258:	08003ba8 	.word	0x08003ba8
 800125c:	08003bc8 	.word	0x08003bc8
 8001260:	08003bd8 	.word	0x08003bd8
 8001264:	08003c0c 	.word	0x08003c0c
 8001268:	08003c44 	.word	0x08003c44
 800126c:	08003c64 	.word	0x08003c64
 8001270:	08003c8c 	.word	0x08003c8c
 8001274:	08003cac 	.word	0x08003cac
 8001278:	08003ccc 	.word	0x08003ccc
 800127c:	08003cdc 	.word	0x08003cdc
 8001280:	08003d0c 	.word	0x08003d0c
 8001284:	08003d44 	.word	0x08003d44
 8001288:	08003d84 	.word	0x08003d84

0800128c <__NVIC_EnableIRQ>:
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	db0b      	blt.n	80012b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f003 021f 	and.w	r2, r3, #31
 80012a4:	4907      	ldr	r1, [pc, #28]	@ (80012c4 <__NVIC_EnableIRQ+0x38>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	2001      	movs	r0, #1
 80012ae:	fa00 f202 	lsl.w	r2, r0, r2
 80012b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000e100 	.word	0xe000e100

080012c8 <vApplicationStackOverflowHook>:

/*
 * FreeRTOS hook function called if any task overflows its stack.
 * Useful for debugging memory issues in FreeRTOS tasks.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
    UART2_SendString("Stack overflow in task: ");
 80012d2:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <vApplicationStackOverflowHook+0x20>)
 80012d4:	f7ff fbf6 	bl	8000ac4 <UART2_SendString>
    UART2_SendString(pcTaskName);
 80012d8:	6838      	ldr	r0, [r7, #0]
 80012da:	f7ff fbf3 	bl	8000ac4 <UART2_SendString>
    UART2_SendString("\r\n");
 80012de:	4803      	ldr	r0, [pc, #12]	@ (80012ec <vApplicationStackOverflowHook+0x24>)
 80012e0:	f7ff fbf0 	bl	8000ac4 <UART2_SendString>

    while (1); // Halt the system for debugging
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <vApplicationStackOverflowHook+0x1c>
 80012e8:	08003d9c 	.word	0x08003d9c
 80012ec:	08003db8 	.word	0x08003db8

080012f0 <TIM1_Init_For_RTOS_Tick>:
/*
 * TIM1 Configuration for FreeRTOS system tick
 * - Uses TIM1 instead of SysTick to generate the 1ms RTOS tick.
 * - TIM1 is on APB2 and runs at 180 MHz (assuming default STM32F4 config).
 */
void TIM1_Init_For_RTOS_Tick(void) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; // Enable TIM1 clock
 80012f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <TIM1_Init_For_RTOS_Tick+0x40>)
 80012f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001330 <TIM1_Init_For_RTOS_Tick+0x40>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6453      	str	r3, [r2, #68]	@ 0x44
    /*
     * TIM1 Clock = 180 MHz
     * Prescaler = 18000 - 1 → TIM1 counter clock = 10 kHz (0.1 ms)
     * ARR = 10 - 1 → Interrupt every 10 counts → 1 ms
     */
    TIM1->PSC = 18000 - 1;   // Scale down to 10 kHz
 8001300:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <TIM1_Init_For_RTOS_Tick+0x44>)
 8001302:	f244 624f 	movw	r2, #17999	@ 0x464f
 8001306:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM1->ARR = 10 - 1;      // Generate interrupt every 1 ms
 8001308:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <TIM1_Init_For_RTOS_Tick+0x44>)
 800130a:	2209      	movs	r2, #9
 800130c:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM1->DIER |= TIM_DIER_UIE;   // Enable update interrupt
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <TIM1_Init_For_RTOS_Tick+0x44>)
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	4a08      	ldr	r2, [pc, #32]	@ (8001334 <TIM1_Init_For_RTOS_Tick+0x44>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	60d3      	str	r3, [r2, #12]
    TIM1->CR1 |= TIM_CR1_CEN;     // Start TIM1
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <TIM1_Init_For_RTOS_Tick+0x44>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a05      	ldr	r2, [pc, #20]	@ (8001334 <TIM1_Init_For_RTOS_Tick+0x44>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6013      	str	r3, [r2, #0]

    NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);  // Enable TIM1 update interrupt in NVIC
 8001326:	2019      	movs	r0, #25
 8001328:	f7ff ffb0 	bl	800128c <__NVIC_EnableIRQ>
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40023800 	.word	0x40023800
 8001334:	40010000 	.word	0x40010000

08001338 <main>:

/*
 * Main entry function
 */
int main(void) {
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
    UART2_Init();           // Initialize UART2 for CLI and debugging
 800133c:	f7ff fb78 	bl	8000a30 <UART2_Init>
    GPIO_Init();            // Initialize general-purpose I/Os (LED, Buzzer, etc.)
 8001340:	f7ff f90c 	bl	800055c <GPIO_Init>
    TIM1_Init_For_RTOS_Tick();  // Use TIM1 for 1ms RTOS tick
 8001344:	f7ff ffd4 	bl	80012f0 <TIM1_Init_For_RTOS_Tick>

    DisplayProjectInfo();   // Show boot message & project info
 8001348:	f7ff ff1a 	bl	8001180 <DisplayProjectInfo>
    DisplayHelp();          // Show available commands on CLI
 800134c:	f7ff fedc 	bl	8001108 <DisplayHelp>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001350:	b662      	cpsie	i
}
 8001352:	bf00      	nop

    __enable_irq();         // Globally enable interrupts

    StartDefaultTasks();    // Create and start all application tasks
 8001354:	f7ff fe62 	bl	800101c <StartDefaultTasks>

    vTaskStartScheduler();  // Start the FreeRTOS scheduler (never returns)
 8001358:	f000 fc58 	bl	8001c0c <vTaskStartScheduler>

    // Should never reach here unless scheduler fails
    while (1) {
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <main+0x24>

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <NMI_Handler+0x4>

08001368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <HardFault_Handler+0x4>

08001370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <MemManage_Handler+0x4>

08001378 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <BusFault_Handler+0x4>

08001380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <UsageFault_Handler+0x4>

08001388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800139c:	4802      	ldr	r0, [pc, #8]	@ (80013a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800139e:	f000 f876 	bl	800148e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200002e0 	.word	0x200002e0

080013ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b4:	4a14      	ldr	r2, [pc, #80]	@ (8001408 <_sbrk+0x5c>)
 80013b6:	4b15      	ldr	r3, [pc, #84]	@ (800140c <_sbrk+0x60>)
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c0:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <_sbrk+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	@ (8001414 <_sbrk+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013dc:	f001 fbea 	bl	8002bb4 <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	220c      	movs	r2, #12
 80013e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e009      	b.n	8001400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f2:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <_sbrk+0x64>)
 80013fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20020000 	.word	0x20020000
 800140c:	00000400 	.word	0x00000400
 8001410:	20000328 	.word	0x20000328
 8001414:	200041c8 	.word	0x200041c8

08001418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <SystemInit+0x20>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001422:	4a05      	ldr	r2, [pc, #20]	@ (8001438 <SystemInit+0x20>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800143c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001474 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001440:	f7ff ffea 	bl	8001418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001444:	480c      	ldr	r0, [pc, #48]	@ (8001478 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001446:	490d      	ldr	r1, [pc, #52]	@ (800147c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001448:	4a0d      	ldr	r2, [pc, #52]	@ (8001480 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800144c:	e002      	b.n	8001454 <LoopCopyDataInit>

0800144e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001452:	3304      	adds	r3, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001458:	d3f9      	bcc.n	800144e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145a:	4a0a      	ldr	r2, [pc, #40]	@ (8001484 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800145c:	4c0a      	ldr	r4, [pc, #40]	@ (8001488 <LoopFillZerobss+0x22>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001460:	e001      	b.n	8001466 <LoopFillZerobss>

08001462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001464:	3204      	adds	r2, #4

08001466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001468:	d3fb      	bcc.n	8001462 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800146a:	f001 fba9 	bl	8002bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146e:	f7ff ff63 	bl	8001338 <main>
  bx  lr    
 8001472:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001474:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001480:	08003e8c 	.word	0x08003e8c
  ldr r2, =_sbss
 8001484:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001488:	200041c8 	.word	0x200041c8

0800148c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC_IRQHandler>

0800148e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d020      	beq.n	80014f2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d01b      	beq.n	80014f2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f06f 0202 	mvn.w	r2, #2
 80014c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 f8dc 	bl	8001696 <HAL_TIM_IC_CaptureCallback>
 80014de:	e005      	b.n	80014ec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 f8ce 	bl	8001682 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f8df 	bl	80016aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d020      	beq.n	800153e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	2b00      	cmp	r3, #0
 8001504:	d01b      	beq.n	800153e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f06f 0204 	mvn.w	r2, #4
 800150e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2202      	movs	r2, #2
 8001514:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f8b6 	bl	8001696 <HAL_TIM_IC_CaptureCallback>
 800152a:	e005      	b.n	8001538 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 f8a8 	bl	8001682 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f8b9 	bl	80016aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b00      	cmp	r3, #0
 8001546:	d020      	beq.n	800158a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d01b      	beq.n	800158a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f06f 0208 	mvn.w	r2, #8
 800155a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2204      	movs	r2, #4
 8001560:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f890 	bl	8001696 <HAL_TIM_IC_CaptureCallback>
 8001576:	e005      	b.n	8001584 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 f882 	bl	8001682 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f893 	bl	80016aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	2b00      	cmp	r3, #0
 8001592:	d020      	beq.n	80015d6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	2b00      	cmp	r3, #0
 800159c:	d01b      	beq.n	80015d6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f06f 0210 	mvn.w	r2, #16
 80015a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2208      	movs	r2, #8
 80015ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f86a 	bl	8001696 <HAL_TIM_IC_CaptureCallback>
 80015c2:	e005      	b.n	80015d0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f85c 	bl	8001682 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f86d 	bl	80016aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00c      	beq.n	80015fa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d007      	beq.n	80015fa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f06f 0201 	mvn.w	r2, #1
 80015f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f83a 	bl	800166e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00c      	beq.n	800161e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800160a:	2b00      	cmp	r3, #0
 800160c:	d007      	beq.n	800161e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f864 	bl	80016e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00c      	beq.n	8001642 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800163a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f83e 	bl	80016be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	f003 0320 	and.w	r3, r3, #32
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00c      	beq.n	8001666 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	2b00      	cmp	r3, #0
 8001654:	d007      	beq.n	8001666 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f06f 0220 	mvn.w	r2, #32
 800165e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 f836 	bl	80016d2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f103 0208 	add.w	r2, r3, #8
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f04f 32ff 	mov.w	r2, #4294967295
 8001712:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f103 0208 	add.w	r2, r3, #8
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f103 0208 	add.w	r2, r3, #8
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	601a      	str	r2, [r3, #0]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b2:	d103      	bne.n	80017bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	e00c      	b.n	80017d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3308      	adds	r3, #8
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	e002      	b.n	80017ca <vListInsert+0x2e>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d2f6      	bcs.n	80017c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	601a      	str	r2, [r3, #0]
}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800180e:	b480      	push	{r7}
 8001810:	b085      	sub	sp, #20
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6892      	ldr	r2, [r2, #8]
 8001824:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6852      	ldr	r2, [r2, #4]
 800182e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	429a      	cmp	r2, r3
 8001838:	d103      	bne.n	8001842 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	1e5a      	subs	r2, r3, #1
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001862:	b580      	push	{r7, lr}
 8001864:	b08e      	sub	sp, #56	@ 0x38
 8001866:	af04      	add	r7, sp, #16
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10b      	bne.n	800188e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800187a:	f383 8811 	msr	BASEPRI, r3
 800187e:	f3bf 8f6f 	isb	sy
 8001882:	f3bf 8f4f 	dsb	sy
 8001886:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	e7fd      	b.n	800188a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800188e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10b      	bne.n	80018ac <xTaskCreateStatic+0x4a>
	__asm volatile
 8001894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001898:	f383 8811 	msr	BASEPRI, r3
 800189c:	f3bf 8f6f 	isb	sy
 80018a0:	f3bf 8f4f 	dsb	sy
 80018a4:	61fb      	str	r3, [r7, #28]
}
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
 80018aa:	e7fd      	b.n	80018a8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80018ac:	2354      	movs	r3, #84	@ 0x54
 80018ae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	2b54      	cmp	r3, #84	@ 0x54
 80018b4:	d00b      	beq.n	80018ce <xTaskCreateStatic+0x6c>
	__asm volatile
 80018b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018ba:	f383 8811 	msr	BASEPRI, r3
 80018be:	f3bf 8f6f 	isb	sy
 80018c2:	f3bf 8f4f 	dsb	sy
 80018c6:	61bb      	str	r3, [r7, #24]
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	e7fd      	b.n	80018ca <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80018ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80018d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d01e      	beq.n	8001914 <xTaskCreateStatic+0xb2>
 80018d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d01b      	beq.n	8001914 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80018dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80018e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018e4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	2202      	movs	r2, #2
 80018ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80018ee:	2300      	movs	r3, #0
 80018f0:	9303      	str	r3, [sp, #12]
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	9302      	str	r3, [sp, #8]
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 f850 	bl	80019ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800190c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800190e:	f000 f8dd 	bl	8001acc <prvAddNewTaskToReadyList>
 8001912:	e001      	b.n	8001918 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001918:	697b      	ldr	r3, [r7, #20]
	}
 800191a:	4618      	mov	r0, r3
 800191c:	3728      	adds	r7, #40	@ 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001922:	b580      	push	{r7, lr}
 8001924:	b08c      	sub	sp, #48	@ 0x30
 8001926:	af04      	add	r7, sp, #16
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	603b      	str	r3, [r7, #0]
 800192e:	4613      	mov	r3, r2
 8001930:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fefe 	bl	8002738 <pvPortMalloc>
 800193c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00e      	beq.n	8001962 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001944:	2054      	movs	r0, #84	@ 0x54
 8001946:	f000 fef7 	bl	8002738 <pvPortMalloc>
 800194a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	631a      	str	r2, [r3, #48]	@ 0x30
 8001958:	e005      	b.n	8001966 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800195a:	6978      	ldr	r0, [r7, #20]
 800195c:	f000 ffba 	bl	80028d4 <vPortFree>
 8001960:	e001      	b.n	8001966 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d017      	beq.n	800199c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001974:	88fa      	ldrh	r2, [r7, #6]
 8001976:	2300      	movs	r3, #0
 8001978:	9303      	str	r3, [sp, #12]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 f80e 	bl	80019ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001990:	69f8      	ldr	r0, [r7, #28]
 8001992:	f000 f89b 	bl	8001acc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001996:	2301      	movs	r3, #1
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	e002      	b.n	80019a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
 80019a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80019a2:	69bb      	ldr	r3, [r7, #24]
	}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80019ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019bc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	461a      	mov	r2, r3
 80019c4:	21a5      	movs	r1, #165	@ 0xa5
 80019c6:	f001 f8db 	bl	8002b80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80019ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80019d4:	3b01      	subs	r3, #1
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	f023 0307 	bic.w	r3, r3, #7
 80019e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00b      	beq.n	8001a06 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80019ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019f2:	f383 8811 	msr	BASEPRI, r3
 80019f6:	f3bf 8f6f 	isb	sy
 80019fa:	f3bf 8f4f 	dsb	sy
 80019fe:	617b      	str	r3, [r7, #20]
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	e7fd      	b.n	8001a02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d01f      	beq.n	8001a4c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	e012      	b.n	8001a38 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	4413      	add	r3, r2
 8001a18:	7819      	ldrb	r1, [r3, #0]
 8001a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	4413      	add	r3, r2
 8001a20:	3334      	adds	r3, #52	@ 0x34
 8001a22:	460a      	mov	r2, r1
 8001a24:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d006      	beq.n	8001a40 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3301      	adds	r3, #1
 8001a36:	61fb      	str	r3, [r7, #28]
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	2b0f      	cmp	r3, #15
 8001a3c:	d9e9      	bls.n	8001a12 <prvInitialiseNewTask+0x66>
 8001a3e:	e000      	b.n	8001a42 <prvInitialiseNewTask+0x96>
			{
				break;
 8001a40:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a4a:	e003      	b.n	8001a54 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d901      	bls.n	8001a5e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001a5a:	2306      	movs	r3, #6
 8001a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a62:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a68:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a72:	3304      	adds	r3, #4
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fe60 	bl	800173a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a7c:	3318      	adds	r3, #24
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fe5b 	bl	800173a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a8c:	f1c3 0207 	rsb	r2, r3, #7
 8001a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a98:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	68f9      	ldr	r1, [r7, #12]
 8001aac:	69b8      	ldr	r0, [r7, #24]
 8001aae:	f000 fc33 	bl	8002318 <pxPortInitialiseStack>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ab6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ac2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001ac4:	bf00      	nop
 8001ac6:	3720      	adds	r7, #32
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001ad4:	f000 fd50 	bl	8002578 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b84 <prvAddNewTaskToReadyList+0xb8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	4a29      	ldr	r2, [pc, #164]	@ (8001b84 <prvAddNewTaskToReadyList+0xb8>)
 8001ae0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001ae2:	4b29      	ldr	r3, [pc, #164]	@ (8001b88 <prvAddNewTaskToReadyList+0xbc>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d109      	bne.n	8001afe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001aea:	4a27      	ldr	r2, [pc, #156]	@ (8001b88 <prvAddNewTaskToReadyList+0xbc>)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001af0:	4b24      	ldr	r3, [pc, #144]	@ (8001b84 <prvAddNewTaskToReadyList+0xb8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d110      	bne.n	8001b1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001af8:	f000 faea 	bl	80020d0 <prvInitialiseTaskLists>
 8001afc:	e00d      	b.n	8001b1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001afe:	4b23      	ldr	r3, [pc, #140]	@ (8001b8c <prvAddNewTaskToReadyList+0xc0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001b06:	4b20      	ldr	r3, [pc, #128]	@ (8001b88 <prvAddNewTaskToReadyList+0xbc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d802      	bhi.n	8001b1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001b14:	4a1c      	ldr	r2, [pc, #112]	@ (8001b88 <prvAddNewTaskToReadyList+0xbc>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <prvAddNewTaskToReadyList+0xc4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	4a1b      	ldr	r2, [pc, #108]	@ (8001b90 <prvAddNewTaskToReadyList+0xc4>)
 8001b22:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b28:	2201      	movs	r2, #1
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	4b19      	ldr	r3, [pc, #100]	@ (8001b94 <prvAddNewTaskToReadyList+0xc8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	4a18      	ldr	r2, [pc, #96]	@ (8001b94 <prvAddNewTaskToReadyList+0xc8>)
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4a15      	ldr	r2, [pc, #84]	@ (8001b98 <prvAddNewTaskToReadyList+0xcc>)
 8001b44:	441a      	add	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	f7ff fe01 	bl	8001754 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001b52:	f000 fd43 	bl	80025dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001b56:	4b0d      	ldr	r3, [pc, #52]	@ (8001b8c <prvAddNewTaskToReadyList+0xc0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00e      	beq.n	8001b7c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b88 <prvAddNewTaskToReadyList+0xbc>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d207      	bcs.n	8001b7c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <prvAddNewTaskToReadyList+0xd0>)
 8001b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	f3bf 8f4f 	dsb	sy
 8001b78:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	2000042c 	.word	0x2000042c
 8001b88:	2000032c 	.word	0x2000032c
 8001b8c:	20000438 	.word	0x20000438
 8001b90:	20000448 	.word	0x20000448
 8001b94:	20000434 	.word	0x20000434
 8001b98:	20000330 	.word	0x20000330
 8001b9c:	e000ed04 	.word	0xe000ed04

08001ba0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d018      	beq.n	8001be4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001bb2:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <vTaskDelay+0x64>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00b      	beq.n	8001bd2 <vTaskDelay+0x32>
	__asm volatile
 8001bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bbe:	f383 8811 	msr	BASEPRI, r3
 8001bc2:	f3bf 8f6f 	isb	sy
 8001bc6:	f3bf 8f4f 	dsb	sy
 8001bca:	60bb      	str	r3, [r7, #8]
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	e7fd      	b.n	8001bce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001bd2:	f000 f87d 	bl	8001cd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 fb37 	bl	800224c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001bde:	f000 f885 	bl	8001cec <xTaskResumeAll>
 8001be2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d107      	bne.n	8001bfa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8001bea:	4b07      	ldr	r3, [pc, #28]	@ (8001c08 <vTaskDelay+0x68>)
 8001bec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	f3bf 8f4f 	dsb	sy
 8001bf6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000454 	.word	0x20000454
 8001c08:	e000ed04 	.word	0xe000ed04

08001c0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	@ 0x28
 8001c10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001c1a:	463a      	mov	r2, r7
 8001c1c:	1d39      	adds	r1, r7, #4
 8001c1e:	f107 0308 	add.w	r3, r7, #8
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fa56 	bl	80010d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001c28:	6839      	ldr	r1, [r7, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	9202      	str	r2, [sp, #8]
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	2300      	movs	r3, #0
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	2300      	movs	r3, #0
 8001c38:	460a      	mov	r2, r1
 8001c3a:	491f      	ldr	r1, [pc, #124]	@ (8001cb8 <vTaskStartScheduler+0xac>)
 8001c3c:	481f      	ldr	r0, [pc, #124]	@ (8001cbc <vTaskStartScheduler+0xb0>)
 8001c3e:	f7ff fe10 	bl	8001862 <xTaskCreateStatic>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc0 <vTaskStartScheduler+0xb4>)
 8001c46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001c48:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc0 <vTaskStartScheduler+0xb4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001c50:	2301      	movs	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	e001      	b.n	8001c5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d116      	bne.n	8001c8e <vTaskStartScheduler+0x82>
	__asm volatile
 8001c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c64:	f383 8811 	msr	BASEPRI, r3
 8001c68:	f3bf 8f6f 	isb	sy
 8001c6c:	f3bf 8f4f 	dsb	sy
 8001c70:	613b      	str	r3, [r7, #16]
}
 8001c72:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001c74:	4b13      	ldr	r3, [pc, #76]	@ (8001cc4 <vTaskStartScheduler+0xb8>)
 8001c76:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001c7c:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <vTaskStartScheduler+0xbc>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001c82:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <vTaskStartScheduler+0xc0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001c88:	f000 fbd2 	bl	8002430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001c8c:	e00f      	b.n	8001cae <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c94:	d10b      	bne.n	8001cae <vTaskStartScheduler+0xa2>
	__asm volatile
 8001c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c9a:	f383 8811 	msr	BASEPRI, r3
 8001c9e:	f3bf 8f6f 	isb	sy
 8001ca2:	f3bf 8f4f 	dsb	sy
 8001ca6:	60fb      	str	r3, [r7, #12]
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	e7fd      	b.n	8001caa <vTaskStartScheduler+0x9e>
}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	08003dbc 	.word	0x08003dbc
 8001cbc:	080020a1 	.word	0x080020a1
 8001cc0:	20000450 	.word	0x20000450
 8001cc4:	2000044c 	.word	0x2000044c
 8001cc8:	20000438 	.word	0x20000438
 8001ccc:	20000430 	.word	0x20000430

08001cd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001cd4:	4b04      	ldr	r3, [pc, #16]	@ (8001ce8 <vTaskSuspendAll+0x18>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	4a03      	ldr	r2, [pc, #12]	@ (8001ce8 <vTaskSuspendAll+0x18>)
 8001cdc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	20000454 	.word	0x20000454

08001cec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001cfa:	4b42      	ldr	r3, [pc, #264]	@ (8001e04 <xTaskResumeAll+0x118>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10b      	bne.n	8001d1a <xTaskResumeAll+0x2e>
	__asm volatile
 8001d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d06:	f383 8811 	msr	BASEPRI, r3
 8001d0a:	f3bf 8f6f 	isb	sy
 8001d0e:	f3bf 8f4f 	dsb	sy
 8001d12:	603b      	str	r3, [r7, #0]
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	e7fd      	b.n	8001d16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001d1a:	f000 fc2d 	bl	8002578 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001d1e:	4b39      	ldr	r3, [pc, #228]	@ (8001e04 <xTaskResumeAll+0x118>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	4a37      	ldr	r2, [pc, #220]	@ (8001e04 <xTaskResumeAll+0x118>)
 8001d26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d28:	4b36      	ldr	r3, [pc, #216]	@ (8001e04 <xTaskResumeAll+0x118>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d161      	bne.n	8001df4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001d30:	4b35      	ldr	r3, [pc, #212]	@ (8001e08 <xTaskResumeAll+0x11c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d05d      	beq.n	8001df4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d38:	e02e      	b.n	8001d98 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d3a:	4b34      	ldr	r3, [pc, #208]	@ (8001e0c <xTaskResumeAll+0x120>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	3318      	adds	r3, #24
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fd61 	bl	800180e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fd5c 	bl	800180e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e10 <xTaskResumeAll+0x124>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	4a2a      	ldr	r2, [pc, #168]	@ (8001e10 <xTaskResumeAll+0x124>)
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4a27      	ldr	r2, [pc, #156]	@ (8001e14 <xTaskResumeAll+0x128>)
 8001d76:	441a      	add	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4610      	mov	r0, r2
 8001d80:	f7ff fce8 	bl	8001754 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d88:	4b23      	ldr	r3, [pc, #140]	@ (8001e18 <xTaskResumeAll+0x12c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d302      	bcc.n	8001d98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001d92:	4b22      	ldr	r3, [pc, #136]	@ (8001e1c <xTaskResumeAll+0x130>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d98:	4b1c      	ldr	r3, [pc, #112]	@ (8001e0c <xTaskResumeAll+0x120>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1cc      	bne.n	8001d3a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001da6:	f000 fa31 	bl	800220c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001daa:	4b1d      	ldr	r3, [pc, #116]	@ (8001e20 <xTaskResumeAll+0x134>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d010      	beq.n	8001dd8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001db6:	f000 f837 	bl	8001e28 <xTaskIncrementTick>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001dc0:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <xTaskResumeAll+0x130>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f1      	bne.n	8001db6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001dd2:	4b13      	ldr	r3, [pc, #76]	@ (8001e20 <xTaskResumeAll+0x134>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001dd8:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <xTaskResumeAll+0x130>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d009      	beq.n	8001df4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001de0:	2301      	movs	r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001de4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e24 <xTaskResumeAll+0x138>)
 8001de6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	f3bf 8f4f 	dsb	sy
 8001df0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001df4:	f000 fbf2 	bl	80025dc <vPortExitCritical>

	return xAlreadyYielded;
 8001df8:	68bb      	ldr	r3, [r7, #8]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000454 	.word	0x20000454
 8001e08:	2000042c 	.word	0x2000042c
 8001e0c:	200003ec 	.word	0x200003ec
 8001e10:	20000434 	.word	0x20000434
 8001e14:	20000330 	.word	0x20000330
 8001e18:	2000032c 	.word	0x2000032c
 8001e1c:	20000440 	.word	0x20000440
 8001e20:	2000043c 	.word	0x2000043c
 8001e24:	e000ed04 	.word	0xe000ed04

08001e28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e32:	4b4f      	ldr	r3, [pc, #316]	@ (8001f70 <xTaskIncrementTick+0x148>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f040 808f 	bne.w	8001f5a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001e3c:	4b4d      	ldr	r3, [pc, #308]	@ (8001f74 <xTaskIncrementTick+0x14c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	3301      	adds	r3, #1
 8001e42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001e44:	4a4b      	ldr	r2, [pc, #300]	@ (8001f74 <xTaskIncrementTick+0x14c>)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d121      	bne.n	8001e94 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8001e50:	4b49      	ldr	r3, [pc, #292]	@ (8001f78 <xTaskIncrementTick+0x150>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00b      	beq.n	8001e72 <xTaskIncrementTick+0x4a>
	__asm volatile
 8001e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e5e:	f383 8811 	msr	BASEPRI, r3
 8001e62:	f3bf 8f6f 	isb	sy
 8001e66:	f3bf 8f4f 	dsb	sy
 8001e6a:	603b      	str	r3, [r7, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	e7fd      	b.n	8001e6e <xTaskIncrementTick+0x46>
 8001e72:	4b41      	ldr	r3, [pc, #260]	@ (8001f78 <xTaskIncrementTick+0x150>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	4b40      	ldr	r3, [pc, #256]	@ (8001f7c <xTaskIncrementTick+0x154>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a3e      	ldr	r2, [pc, #248]	@ (8001f78 <xTaskIncrementTick+0x150>)
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4a3e      	ldr	r2, [pc, #248]	@ (8001f7c <xTaskIncrementTick+0x154>)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b3e      	ldr	r3, [pc, #248]	@ (8001f80 <xTaskIncrementTick+0x158>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8001f80 <xTaskIncrementTick+0x158>)
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	f000 f9bc 	bl	800220c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001e94:	4b3b      	ldr	r3, [pc, #236]	@ (8001f84 <xTaskIncrementTick+0x15c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d348      	bcc.n	8001f30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e9e:	4b36      	ldr	r3, [pc, #216]	@ (8001f78 <xTaskIncrementTick+0x150>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d104      	bne.n	8001eb2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ea8:	4b36      	ldr	r3, [pc, #216]	@ (8001f84 <xTaskIncrementTick+0x15c>)
 8001eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8001eae:	601a      	str	r2, [r3, #0]
					break;
 8001eb0:	e03e      	b.n	8001f30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001eb2:	4b31      	ldr	r3, [pc, #196]	@ (8001f78 <xTaskIncrementTick+0x150>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d203      	bcs.n	8001ed2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001eca:	4a2e      	ldr	r2, [pc, #184]	@ (8001f84 <xTaskIncrementTick+0x15c>)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001ed0:	e02e      	b.n	8001f30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fc99 	bl	800180e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d004      	beq.n	8001eee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	3318      	adds	r3, #24
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fc90 	bl	800180e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4b24      	ldr	r3, [pc, #144]	@ (8001f88 <xTaskIncrementTick+0x160>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	4a22      	ldr	r2, [pc, #136]	@ (8001f88 <xTaskIncrementTick+0x160>)
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f8c <xTaskIncrementTick+0x164>)
 8001f0e:	441a      	add	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	3304      	adds	r3, #4
 8001f14:	4619      	mov	r1, r3
 8001f16:	4610      	mov	r0, r2
 8001f18:	f7ff fc1c 	bl	8001754 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f20:	4b1b      	ldr	r3, [pc, #108]	@ (8001f90 <xTaskIncrementTick+0x168>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d3b9      	bcc.n	8001e9e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f2e:	e7b6      	b.n	8001e9e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001f30:	4b17      	ldr	r3, [pc, #92]	@ (8001f90 <xTaskIncrementTick+0x168>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f36:	4915      	ldr	r1, [pc, #84]	@ (8001f8c <xTaskIncrementTick+0x164>)
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d901      	bls.n	8001f4c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001f4c:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <xTaskIncrementTick+0x16c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d007      	beq.n	8001f64 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001f54:	2301      	movs	r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	e004      	b.n	8001f64 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f98 <xTaskIncrementTick+0x170>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	4a0d      	ldr	r2, [pc, #52]	@ (8001f98 <xTaskIncrementTick+0x170>)
 8001f62:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001f64:	697b      	ldr	r3, [r7, #20]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000454 	.word	0x20000454
 8001f74:	20000430 	.word	0x20000430
 8001f78:	200003e4 	.word	0x200003e4
 8001f7c:	200003e8 	.word	0x200003e8
 8001f80:	20000444 	.word	0x20000444
 8001f84:	2000044c 	.word	0x2000044c
 8001f88:	20000434 	.word	0x20000434
 8001f8c:	20000330 	.word	0x20000330
 8001f90:	2000032c 	.word	0x2000032c
 8001f94:	20000440 	.word	0x20000440
 8001f98:	2000043c 	.word	0x2000043c

08001f9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001fa2:	4b3a      	ldr	r3, [pc, #232]	@ (800208c <vTaskSwitchContext+0xf0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001faa:	4b39      	ldr	r3, [pc, #228]	@ (8002090 <vTaskSwitchContext+0xf4>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001fb0:	e067      	b.n	8002082 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 8001fb2:	4b37      	ldr	r3, [pc, #220]	@ (8002090 <vTaskSwitchContext+0xf4>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8001fb8:	4b36      	ldr	r3, [pc, #216]	@ (8002094 <vTaskSwitchContext+0xf8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	61fb      	str	r3, [r7, #28]
 8001fc0:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d111      	bne.n	8001ff4 <vTaskSwitchContext+0x58>
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d10b      	bne.n	8001ff4 <vTaskSwitchContext+0x58>
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	3308      	adds	r3, #8
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d105      	bne.n	8001ff4 <vTaskSwitchContext+0x58>
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	330c      	adds	r3, #12
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d008      	beq.n	8002006 <vTaskSwitchContext+0x6a>
 8001ff4:	4b27      	ldr	r3, [pc, #156]	@ (8002094 <vTaskSwitchContext+0xf8>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b26      	ldr	r3, [pc, #152]	@ (8002094 <vTaskSwitchContext+0xf8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	3334      	adds	r3, #52	@ 0x34
 8001ffe:	4619      	mov	r1, r3
 8002000:	4610      	mov	r0, r2
 8002002:	f7ff f961 	bl	80012c8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002006:	4b24      	ldr	r3, [pc, #144]	@ (8002098 <vTaskSwitchContext+0xfc>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002014:	7afb      	ldrb	r3, [r7, #11]
 8002016:	f1c3 031f 	rsb	r3, r3, #31
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	491f      	ldr	r1, [pc, #124]	@ (800209c <vTaskSwitchContext+0x100>)
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10b      	bne.n	8002048 <vTaskSwitchContext+0xac>
	__asm volatile
 8002030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002034:	f383 8811 	msr	BASEPRI, r3
 8002038:	f3bf 8f6f 	isb	sy
 800203c:	f3bf 8f4f 	dsb	sy
 8002040:	607b      	str	r3, [r7, #4]
}
 8002042:	bf00      	nop
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <vTaskSwitchContext+0xa8>
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4a12      	ldr	r2, [pc, #72]	@ (800209c <vTaskSwitchContext+0x100>)
 8002054:	4413      	add	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	3308      	adds	r3, #8
 800206a:	429a      	cmp	r2, r3
 800206c:	d104      	bne.n	8002078 <vTaskSwitchContext+0xdc>
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	4a05      	ldr	r2, [pc, #20]	@ (8002094 <vTaskSwitchContext+0xf8>)
 8002080:	6013      	str	r3, [r2, #0]
}
 8002082:	bf00      	nop
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000454 	.word	0x20000454
 8002090:	20000440 	.word	0x20000440
 8002094:	2000032c 	.word	0x2000032c
 8002098:	20000434 	.word	0x20000434
 800209c:	20000330 	.word	0x20000330

080020a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80020a8:	f000 f852 	bl	8002150 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80020ac:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <prvIdleTask+0x28>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d9f9      	bls.n	80020a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80020b4:	4b05      	ldr	r3, [pc, #20]	@ (80020cc <prvIdleTask+0x2c>)
 80020b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	f3bf 8f4f 	dsb	sy
 80020c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80020c4:	e7f0      	b.n	80020a8 <prvIdleTask+0x8>
 80020c6:	bf00      	nop
 80020c8:	20000330 	.word	0x20000330
 80020cc:	e000ed04 	.word	0xe000ed04

080020d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	e00c      	b.n	80020f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4a12      	ldr	r2, [pc, #72]	@ (8002130 <prvInitialiseTaskLists+0x60>)
 80020e8:	4413      	add	r3, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fb05 	bl	80016fa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3301      	adds	r3, #1
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b06      	cmp	r3, #6
 80020fa:	d9ef      	bls.n	80020dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80020fc:	480d      	ldr	r0, [pc, #52]	@ (8002134 <prvInitialiseTaskLists+0x64>)
 80020fe:	f7ff fafc 	bl	80016fa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002102:	480d      	ldr	r0, [pc, #52]	@ (8002138 <prvInitialiseTaskLists+0x68>)
 8002104:	f7ff faf9 	bl	80016fa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002108:	480c      	ldr	r0, [pc, #48]	@ (800213c <prvInitialiseTaskLists+0x6c>)
 800210a:	f7ff faf6 	bl	80016fa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800210e:	480c      	ldr	r0, [pc, #48]	@ (8002140 <prvInitialiseTaskLists+0x70>)
 8002110:	f7ff faf3 	bl	80016fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002114:	480b      	ldr	r0, [pc, #44]	@ (8002144 <prvInitialiseTaskLists+0x74>)
 8002116:	f7ff faf0 	bl	80016fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800211a:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <prvInitialiseTaskLists+0x78>)
 800211c:	4a05      	ldr	r2, [pc, #20]	@ (8002134 <prvInitialiseTaskLists+0x64>)
 800211e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002120:	4b0a      	ldr	r3, [pc, #40]	@ (800214c <prvInitialiseTaskLists+0x7c>)
 8002122:	4a05      	ldr	r2, [pc, #20]	@ (8002138 <prvInitialiseTaskLists+0x68>)
 8002124:	601a      	str	r2, [r3, #0]
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000330 	.word	0x20000330
 8002134:	200003bc 	.word	0x200003bc
 8002138:	200003d0 	.word	0x200003d0
 800213c:	200003ec 	.word	0x200003ec
 8002140:	20000400 	.word	0x20000400
 8002144:	20000418 	.word	0x20000418
 8002148:	200003e4 	.word	0x200003e4
 800214c:	200003e8 	.word	0x200003e8

08002150 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002156:	e019      	b.n	800218c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002158:	f000 fa0e 	bl	8002578 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800215c:	4b10      	ldr	r3, [pc, #64]	@ (80021a0 <prvCheckTasksWaitingTermination+0x50>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3304      	adds	r3, #4
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fb50 	bl	800180e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800216e:	4b0d      	ldr	r3, [pc, #52]	@ (80021a4 <prvCheckTasksWaitingTermination+0x54>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	3b01      	subs	r3, #1
 8002174:	4a0b      	ldr	r2, [pc, #44]	@ (80021a4 <prvCheckTasksWaitingTermination+0x54>)
 8002176:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002178:	4b0b      	ldr	r3, [pc, #44]	@ (80021a8 <prvCheckTasksWaitingTermination+0x58>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3b01      	subs	r3, #1
 800217e:	4a0a      	ldr	r2, [pc, #40]	@ (80021a8 <prvCheckTasksWaitingTermination+0x58>)
 8002180:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002182:	f000 fa2b 	bl	80025dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f810 	bl	80021ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800218c:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <prvCheckTasksWaitingTermination+0x58>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1e1      	bne.n	8002158 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000400 	.word	0x20000400
 80021a4:	2000042c 	.word	0x2000042c
 80021a8:	20000414 	.word	0x20000414

080021ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d108      	bne.n	80021d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fb86 	bl	80028d4 <vPortFree>
				vPortFree( pxTCB );
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 fb83 	bl	80028d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80021ce:	e019      	b.n	8002204 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d103      	bne.n	80021e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 fb7a 	bl	80028d4 <vPortFree>
	}
 80021e0:	e010      	b.n	8002204 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d00b      	beq.n	8002204 <prvDeleteTCB+0x58>
	__asm volatile
 80021ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021f0:	f383 8811 	msr	BASEPRI, r3
 80021f4:	f3bf 8f6f 	isb	sy
 80021f8:	f3bf 8f4f 	dsb	sy
 80021fc:	60fb      	str	r3, [r7, #12]
}
 80021fe:	bf00      	nop
 8002200:	bf00      	nop
 8002202:	e7fd      	b.n	8002200 <prvDeleteTCB+0x54>
	}
 8002204:	bf00      	nop
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002212:	4b0c      	ldr	r3, [pc, #48]	@ (8002244 <prvResetNextTaskUnblockTime+0x38>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d104      	bne.n	8002226 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800221c:	4b0a      	ldr	r3, [pc, #40]	@ (8002248 <prvResetNextTaskUnblockTime+0x3c>)
 800221e:	f04f 32ff 	mov.w	r2, #4294967295
 8002222:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002224:	e008      	b.n	8002238 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002226:	4b07      	ldr	r3, [pc, #28]	@ (8002244 <prvResetNextTaskUnblockTime+0x38>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4a04      	ldr	r2, [pc, #16]	@ (8002248 <prvResetNextTaskUnblockTime+0x3c>)
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	200003e4 	.word	0x200003e4
 8002248:	2000044c 	.word	0x2000044c

0800224c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002256:	4b29      	ldr	r3, [pc, #164]	@ (80022fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800225c:	4b28      	ldr	r3, [pc, #160]	@ (8002300 <prvAddCurrentTaskToDelayedList+0xb4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	3304      	adds	r3, #4
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fad3 	bl	800180e <uxListRemove>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10b      	bne.n	8002286 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800226e:	4b24      	ldr	r3, [pc, #144]	@ (8002300 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002274:	2201      	movs	r2, #1
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43da      	mvns	r2, r3
 800227c:	4b21      	ldr	r3, [pc, #132]	@ (8002304 <prvAddCurrentTaskToDelayedList+0xb8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4013      	ands	r3, r2
 8002282:	4a20      	ldr	r2, [pc, #128]	@ (8002304 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002284:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228c:	d10a      	bne.n	80022a4 <prvAddCurrentTaskToDelayedList+0x58>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d007      	beq.n	80022a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002294:	4b1a      	ldr	r3, [pc, #104]	@ (8002300 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	3304      	adds	r3, #4
 800229a:	4619      	mov	r1, r3
 800229c:	481a      	ldr	r0, [pc, #104]	@ (8002308 <prvAddCurrentTaskToDelayedList+0xbc>)
 800229e:	f7ff fa59 	bl	8001754 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80022a2:	e026      	b.n	80022f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80022ac:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d209      	bcs.n	80022d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022bc:	4b13      	ldr	r3, [pc, #76]	@ (800230c <prvAddCurrentTaskToDelayedList+0xc0>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002300 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	3304      	adds	r3, #4
 80022c6:	4619      	mov	r1, r3
 80022c8:	4610      	mov	r0, r2
 80022ca:	f7ff fa67 	bl	800179c <vListInsert>
}
 80022ce:	e010      	b.n	80022f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002310 <prvAddCurrentTaskToDelayedList+0xc4>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002300 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3304      	adds	r3, #4
 80022da:	4619      	mov	r1, r3
 80022dc:	4610      	mov	r0, r2
 80022de:	f7ff fa5d 	bl	800179c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80022e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <prvAddCurrentTaskToDelayedList+0xc8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d202      	bcs.n	80022f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80022ec:	4a09      	ldr	r2, [pc, #36]	@ (8002314 <prvAddCurrentTaskToDelayedList+0xc8>)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	6013      	str	r3, [r2, #0]
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000430 	.word	0x20000430
 8002300:	2000032c 	.word	0x2000032c
 8002304:	20000434 	.word	0x20000434
 8002308:	20000418 	.word	0x20000418
 800230c:	200003e8 	.word	0x200003e8
 8002310:	200003e4 	.word	0x200003e4
 8002314:	2000044c 	.word	0x2000044c

08002318 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	3b04      	subs	r3, #4
 8002328:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002330:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	3b04      	subs	r3, #4
 8002336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f023 0201 	bic.w	r2, r3, #1
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	3b04      	subs	r3, #4
 8002346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002348:	4a0c      	ldr	r2, [pc, #48]	@ (800237c <pxPortInitialiseStack+0x64>)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	3b14      	subs	r3, #20
 8002352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3b04      	subs	r3, #4
 800235e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f06f 0202 	mvn.w	r2, #2
 8002366:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3b20      	subs	r3, #32
 800236c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800236e:	68fb      	ldr	r3, [r7, #12]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	08002381 	.word	0x08002381

08002380 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800238a:	4b13      	ldr	r3, [pc, #76]	@ (80023d8 <prvTaskExitError+0x58>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002392:	d00b      	beq.n	80023ac <prvTaskExitError+0x2c>
	__asm volatile
 8002394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	60fb      	str	r3, [r7, #12]
}
 80023a6:	bf00      	nop
 80023a8:	bf00      	nop
 80023aa:	e7fd      	b.n	80023a8 <prvTaskExitError+0x28>
	__asm volatile
 80023ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023b0:	f383 8811 	msr	BASEPRI, r3
 80023b4:	f3bf 8f6f 	isb	sy
 80023b8:	f3bf 8f4f 	dsb	sy
 80023bc:	60bb      	str	r3, [r7, #8]
}
 80023be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80023c0:	bf00      	nop
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0fc      	beq.n	80023c2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000004 	.word	0x20000004
 80023dc:	00000000 	.word	0x00000000

080023e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80023e0:	4b07      	ldr	r3, [pc, #28]	@ (8002400 <pxCurrentTCBConst2>)
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	6808      	ldr	r0, [r1, #0]
 80023e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023ea:	f380 8809 	msr	PSP, r0
 80023ee:	f3bf 8f6f 	isb	sy
 80023f2:	f04f 0000 	mov.w	r0, #0
 80023f6:	f380 8811 	msr	BASEPRI, r0
 80023fa:	4770      	bx	lr
 80023fc:	f3af 8000 	nop.w

08002400 <pxCurrentTCBConst2>:
 8002400:	2000032c 	.word	0x2000032c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop

08002408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002408:	4808      	ldr	r0, [pc, #32]	@ (800242c <prvPortStartFirstTask+0x24>)
 800240a:	6800      	ldr	r0, [r0, #0]
 800240c:	6800      	ldr	r0, [r0, #0]
 800240e:	f380 8808 	msr	MSP, r0
 8002412:	f04f 0000 	mov.w	r0, #0
 8002416:	f380 8814 	msr	CONTROL, r0
 800241a:	b662      	cpsie	i
 800241c:	b661      	cpsie	f
 800241e:	f3bf 8f4f 	dsb	sy
 8002422:	f3bf 8f6f 	isb	sy
 8002426:	df00      	svc	0
 8002428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800242a:	bf00      	nop
 800242c:	e000ed08 	.word	0xe000ed08

08002430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002436:	4b47      	ldr	r3, [pc, #284]	@ (8002554 <xPortStartScheduler+0x124>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a47      	ldr	r2, [pc, #284]	@ (8002558 <xPortStartScheduler+0x128>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d10b      	bne.n	8002458 <xPortStartScheduler+0x28>
	__asm volatile
 8002440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002444:	f383 8811 	msr	BASEPRI, r3
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	60fb      	str	r3, [r7, #12]
}
 8002452:	bf00      	nop
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002458:	4b3e      	ldr	r3, [pc, #248]	@ (8002554 <xPortStartScheduler+0x124>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a3f      	ldr	r2, [pc, #252]	@ (800255c <xPortStartScheduler+0x12c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10b      	bne.n	800247a <xPortStartScheduler+0x4a>
	__asm volatile
 8002462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002466:	f383 8811 	msr	BASEPRI, r3
 800246a:	f3bf 8f6f 	isb	sy
 800246e:	f3bf 8f4f 	dsb	sy
 8002472:	613b      	str	r3, [r7, #16]
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	e7fd      	b.n	8002476 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800247a:	4b39      	ldr	r3, [pc, #228]	@ (8002560 <xPortStartScheduler+0x130>)
 800247c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	22ff      	movs	r2, #255	@ 0xff
 800248a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002494:	78fb      	ldrb	r3, [r7, #3]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800249c:	b2da      	uxtb	r2, r3
 800249e:	4b31      	ldr	r3, [pc, #196]	@ (8002564 <xPortStartScheduler+0x134>)
 80024a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80024a2:	4b31      	ldr	r3, [pc, #196]	@ (8002568 <xPortStartScheduler+0x138>)
 80024a4:	2207      	movs	r2, #7
 80024a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80024a8:	e009      	b.n	80024be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80024aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002568 <xPortStartScheduler+0x138>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002568 <xPortStartScheduler+0x138>)
 80024b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c6:	2b80      	cmp	r3, #128	@ 0x80
 80024c8:	d0ef      	beq.n	80024aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80024ca:	4b27      	ldr	r3, [pc, #156]	@ (8002568 <xPortStartScheduler+0x138>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f1c3 0307 	rsb	r3, r3, #7
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d00b      	beq.n	80024ee <xPortStartScheduler+0xbe>
	__asm volatile
 80024d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024da:	f383 8811 	msr	BASEPRI, r3
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	f3bf 8f4f 	dsb	sy
 80024e6:	60bb      	str	r3, [r7, #8]
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	e7fd      	b.n	80024ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80024ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002568 <xPortStartScheduler+0x138>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002568 <xPortStartScheduler+0x138>)
 80024f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80024f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <xPortStartScheduler+0x138>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002500:	4a19      	ldr	r2, [pc, #100]	@ (8002568 <xPortStartScheduler+0x138>)
 8002502:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	b2da      	uxtb	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800250c:	4b17      	ldr	r3, [pc, #92]	@ (800256c <xPortStartScheduler+0x13c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a16      	ldr	r2, [pc, #88]	@ (800256c <xPortStartScheduler+0x13c>)
 8002512:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002516:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002518:	4b14      	ldr	r3, [pc, #80]	@ (800256c <xPortStartScheduler+0x13c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a13      	ldr	r2, [pc, #76]	@ (800256c <xPortStartScheduler+0x13c>)
 800251e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002522:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002524:	f000 f8da 	bl	80026dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002528:	4b11      	ldr	r3, [pc, #68]	@ (8002570 <xPortStartScheduler+0x140>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800252e:	f000 f8f9 	bl	8002724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002532:	4b10      	ldr	r3, [pc, #64]	@ (8002574 <xPortStartScheduler+0x144>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a0f      	ldr	r2, [pc, #60]	@ (8002574 <xPortStartScheduler+0x144>)
 8002538:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800253c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800253e:	f7ff ff63 	bl	8002408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002542:	f7ff fd2b 	bl	8001f9c <vTaskSwitchContext>
	prvTaskExitError();
 8002546:	f7ff ff1b 	bl	8002380 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	e000ed00 	.word	0xe000ed00
 8002558:	410fc271 	.word	0x410fc271
 800255c:	410fc270 	.word	0x410fc270
 8002560:	e000e400 	.word	0xe000e400
 8002564:	20000458 	.word	0x20000458
 8002568:	2000045c 	.word	0x2000045c
 800256c:	e000ed20 	.word	0xe000ed20
 8002570:	20000004 	.word	0x20000004
 8002574:	e000ef34 	.word	0xe000ef34

08002578 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
	__asm volatile
 800257e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002582:	f383 8811 	msr	BASEPRI, r3
 8002586:	f3bf 8f6f 	isb	sy
 800258a:	f3bf 8f4f 	dsb	sy
 800258e:	607b      	str	r3, [r7, #4]
}
 8002590:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002592:	4b10      	ldr	r3, [pc, #64]	@ (80025d4 <vPortEnterCritical+0x5c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	4a0e      	ldr	r2, [pc, #56]	@ (80025d4 <vPortEnterCritical+0x5c>)
 800259a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800259c:	4b0d      	ldr	r3, [pc, #52]	@ (80025d4 <vPortEnterCritical+0x5c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d110      	bne.n	80025c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80025a4:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <vPortEnterCritical+0x60>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80025ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025b2:	f383 8811 	msr	BASEPRI, r3
 80025b6:	f3bf 8f6f 	isb	sy
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	603b      	str	r3, [r7, #0]
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	e7fd      	b.n	80025c2 <vPortEnterCritical+0x4a>
	}
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000004 	.word	0x20000004
 80025d8:	e000ed04 	.word	0xe000ed04

080025dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80025e2:	4b12      	ldr	r3, [pc, #72]	@ (800262c <vPortExitCritical+0x50>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10b      	bne.n	8002602 <vPortExitCritical+0x26>
	__asm volatile
 80025ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ee:	f383 8811 	msr	BASEPRI, r3
 80025f2:	f3bf 8f6f 	isb	sy
 80025f6:	f3bf 8f4f 	dsb	sy
 80025fa:	607b      	str	r3, [r7, #4]
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	e7fd      	b.n	80025fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002602:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <vPortExitCritical+0x50>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	3b01      	subs	r3, #1
 8002608:	4a08      	ldr	r2, [pc, #32]	@ (800262c <vPortExitCritical+0x50>)
 800260a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800260c:	4b07      	ldr	r3, [pc, #28]	@ (800262c <vPortExitCritical+0x50>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d105      	bne.n	8002620 <vPortExitCritical+0x44>
 8002614:	2300      	movs	r3, #0
 8002616:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800261e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	20000004 	.word	0x20000004

08002630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002630:	f3ef 8009 	mrs	r0, PSP
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <pxCurrentTCBConst>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	f01e 0f10 	tst.w	lr, #16
 8002640:	bf08      	it	eq
 8002642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800264a:	6010      	str	r0, [r2, #0]
 800264c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002650:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002654:	f380 8811 	msr	BASEPRI, r0
 8002658:	f3bf 8f4f 	dsb	sy
 800265c:	f3bf 8f6f 	isb	sy
 8002660:	f7ff fc9c 	bl	8001f9c <vTaskSwitchContext>
 8002664:	f04f 0000 	mov.w	r0, #0
 8002668:	f380 8811 	msr	BASEPRI, r0
 800266c:	bc09      	pop	{r0, r3}
 800266e:	6819      	ldr	r1, [r3, #0]
 8002670:	6808      	ldr	r0, [r1, #0]
 8002672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002676:	f01e 0f10 	tst.w	lr, #16
 800267a:	bf08      	it	eq
 800267c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002680:	f380 8809 	msr	PSP, r0
 8002684:	f3bf 8f6f 	isb	sy
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	f3af 8000 	nop.w

08002690 <pxCurrentTCBConst>:
 8002690:	2000032c 	.word	0x2000032c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop

08002698 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
	__asm volatile
 800269e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026a2:	f383 8811 	msr	BASEPRI, r3
 80026a6:	f3bf 8f6f 	isb	sy
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	607b      	str	r3, [r7, #4]
}
 80026b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80026b2:	f7ff fbb9 	bl	8001e28 <xTaskIncrementTick>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80026bc:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <SysTick_Handler+0x40>)
 80026be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	2300      	movs	r3, #0
 80026c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	f383 8811 	msr	BASEPRI, r3
}
 80026ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	e000ed04 	.word	0xe000ed04

080026dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80026e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <vPortSetupTimerInterrupt+0x34>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80026e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <vPortSetupTimerInterrupt+0x38>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80026ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002718 <vPortSetupTimerInterrupt+0x3c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a0a      	ldr	r2, [pc, #40]	@ (800271c <vPortSetupTimerInterrupt+0x40>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	099b      	lsrs	r3, r3, #6
 80026f8:	4a09      	ldr	r2, [pc, #36]	@ (8002720 <vPortSetupTimerInterrupt+0x44>)
 80026fa:	3b01      	subs	r3, #1
 80026fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80026fe:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <vPortSetupTimerInterrupt+0x34>)
 8002700:	2207      	movs	r2, #7
 8002702:	601a      	str	r2, [r3, #0]
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000e010 	.word	0xe000e010
 8002714:	e000e018 	.word	0xe000e018
 8002718:	20000000 	.word	0x20000000
 800271c:	10624dd3 	.word	0x10624dd3
 8002720:	e000e014 	.word	0xe000e014

08002724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002724:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002734 <vPortEnableVFP+0x10>
 8002728:	6801      	ldr	r1, [r0, #0]
 800272a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800272e:	6001      	str	r1, [r0, #0]
 8002730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002732:	bf00      	nop
 8002734:	e000ed88 	.word	0xe000ed88

08002738 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	@ 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002740:	2300      	movs	r3, #0
 8002742:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002744:	f7ff fac4 	bl	8001cd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002748:	4b5c      	ldr	r3, [pc, #368]	@ (80028bc <pvPortMalloc+0x184>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002750:	f000 f924 	bl	800299c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002754:	4b5a      	ldr	r3, [pc, #360]	@ (80028c0 <pvPortMalloc+0x188>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	f040 8095 	bne.w	800288c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01e      	beq.n	80027a6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002768:	2208      	movs	r2, #8
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	2b00      	cmp	r3, #0
 8002778:	d015      	beq.n	80027a6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f023 0307 	bic.w	r3, r3, #7
 8002780:	3308      	adds	r3, #8
 8002782:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <pvPortMalloc+0x6e>
	__asm volatile
 800278e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002792:	f383 8811 	msr	BASEPRI, r3
 8002796:	f3bf 8f6f 	isb	sy
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	617b      	str	r3, [r7, #20]
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	e7fd      	b.n	80027a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d06f      	beq.n	800288c <pvPortMalloc+0x154>
 80027ac:	4b45      	ldr	r3, [pc, #276]	@ (80028c4 <pvPortMalloc+0x18c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d86a      	bhi.n	800288c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80027b6:	4b44      	ldr	r3, [pc, #272]	@ (80028c8 <pvPortMalloc+0x190>)
 80027b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80027ba:	4b43      	ldr	r3, [pc, #268]	@ (80028c8 <pvPortMalloc+0x190>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80027c0:	e004      	b.n	80027cc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d903      	bls.n	80027de <pvPortMalloc+0xa6>
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f1      	bne.n	80027c2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80027de:	4b37      	ldr	r3, [pc, #220]	@ (80028bc <pvPortMalloc+0x184>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d051      	beq.n	800288c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2208      	movs	r2, #8
 80027ee:	4413      	add	r3, r2
 80027f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	1ad2      	subs	r2, r2, r3
 8002802:	2308      	movs	r3, #8
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	429a      	cmp	r2, r3
 8002808:	d920      	bls.n	800284c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800280a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4413      	add	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00b      	beq.n	8002834 <pvPortMalloc+0xfc>
	__asm volatile
 800281c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002820:	f383 8811 	msr	BASEPRI, r3
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	613b      	str	r3, [r7, #16]
}
 800282e:	bf00      	nop
 8002830:	bf00      	nop
 8002832:	e7fd      	b.n	8002830 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	1ad2      	subs	r2, r2, r3
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002846:	69b8      	ldr	r0, [r7, #24]
 8002848:	f000 f90a 	bl	8002a60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800284c:	4b1d      	ldr	r3, [pc, #116]	@ (80028c4 <pvPortMalloc+0x18c>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	4a1b      	ldr	r2, [pc, #108]	@ (80028c4 <pvPortMalloc+0x18c>)
 8002858:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800285a:	4b1a      	ldr	r3, [pc, #104]	@ (80028c4 <pvPortMalloc+0x18c>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <pvPortMalloc+0x194>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d203      	bcs.n	800286e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002866:	4b17      	ldr	r3, [pc, #92]	@ (80028c4 <pvPortMalloc+0x18c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a18      	ldr	r2, [pc, #96]	@ (80028cc <pvPortMalloc+0x194>)
 800286c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	4b13      	ldr	r3, [pc, #76]	@ (80028c0 <pvPortMalloc+0x188>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	431a      	orrs	r2, r3
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002882:	4b13      	ldr	r3, [pc, #76]	@ (80028d0 <pvPortMalloc+0x198>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3301      	adds	r3, #1
 8002888:	4a11      	ldr	r2, [pc, #68]	@ (80028d0 <pvPortMalloc+0x198>)
 800288a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800288c:	f7ff fa2e 	bl	8001cec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00b      	beq.n	80028b2 <pvPortMalloc+0x17a>
	__asm volatile
 800289a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800289e:	f383 8811 	msr	BASEPRI, r3
 80028a2:	f3bf 8f6f 	isb	sy
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	60fb      	str	r3, [r7, #12]
}
 80028ac:	bf00      	nop
 80028ae:	bf00      	nop
 80028b0:	e7fd      	b.n	80028ae <pvPortMalloc+0x176>
	return pvReturn;
 80028b2:	69fb      	ldr	r3, [r7, #28]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3728      	adds	r7, #40	@ 0x28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20004068 	.word	0x20004068
 80028c0:	2000407c 	.word	0x2000407c
 80028c4:	2000406c 	.word	0x2000406c
 80028c8:	20004060 	.word	0x20004060
 80028cc:	20004070 	.word	0x20004070
 80028d0:	20004074 	.word	0x20004074

080028d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d04f      	beq.n	8002986 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80028e6:	2308      	movs	r3, #8
 80028e8:	425b      	negs	r3, r3
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4413      	add	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4b25      	ldr	r3, [pc, #148]	@ (8002990 <vPortFree+0xbc>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10b      	bne.n	800291a <vPortFree+0x46>
	__asm volatile
 8002902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002906:	f383 8811 	msr	BASEPRI, r3
 800290a:	f3bf 8f6f 	isb	sy
 800290e:	f3bf 8f4f 	dsb	sy
 8002912:	60fb      	str	r3, [r7, #12]
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	e7fd      	b.n	8002916 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00b      	beq.n	800293a <vPortFree+0x66>
	__asm volatile
 8002922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002926:	f383 8811 	msr	BASEPRI, r3
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	60bb      	str	r3, [r7, #8]
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	e7fd      	b.n	8002936 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	4b14      	ldr	r3, [pc, #80]	@ (8002990 <vPortFree+0xbc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01e      	beq.n	8002986 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d11a      	bne.n	8002986 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	4b0e      	ldr	r3, [pc, #56]	@ (8002990 <vPortFree+0xbc>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	43db      	mvns	r3, r3
 800295a:	401a      	ands	r2, r3
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002960:	f7ff f9b6 	bl	8001cd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	4b0a      	ldr	r3, [pc, #40]	@ (8002994 <vPortFree+0xc0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4413      	add	r3, r2
 800296e:	4a09      	ldr	r2, [pc, #36]	@ (8002994 <vPortFree+0xc0>)
 8002970:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002972:	6938      	ldr	r0, [r7, #16]
 8002974:	f000 f874 	bl	8002a60 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002978:	4b07      	ldr	r3, [pc, #28]	@ (8002998 <vPortFree+0xc4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3301      	adds	r3, #1
 800297e:	4a06      	ldr	r2, [pc, #24]	@ (8002998 <vPortFree+0xc4>)
 8002980:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002982:	f7ff f9b3 	bl	8001cec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002986:	bf00      	nop
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	2000407c 	.word	0x2000407c
 8002994:	2000406c 	.word	0x2000406c
 8002998:	20004078 	.word	0x20004078

0800299c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80029a2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80029a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80029a8:	4b27      	ldr	r3, [pc, #156]	@ (8002a48 <prvHeapInit+0xac>)
 80029aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00c      	beq.n	80029d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3307      	adds	r3, #7
 80029ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 0307 	bic.w	r3, r3, #7
 80029c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002a48 <prvHeapInit+0xac>)
 80029cc:	4413      	add	r3, r2
 80029ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80029d4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a4c <prvHeapInit+0xb0>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80029da:	4b1c      	ldr	r3, [pc, #112]	@ (8002a4c <prvHeapInit+0xb0>)
 80029dc:	2200      	movs	r2, #0
 80029de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	4413      	add	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80029e8:	2208      	movs	r2, #8
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0307 	bic.w	r3, r3, #7
 80029f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4a15      	ldr	r2, [pc, #84]	@ (8002a50 <prvHeapInit+0xb4>)
 80029fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80029fe:	4b14      	ldr	r3, [pc, #80]	@ (8002a50 <prvHeapInit+0xb4>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2200      	movs	r2, #0
 8002a04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002a06:	4b12      	ldr	r3, [pc, #72]	@ (8002a50 <prvHeapInit+0xb4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	1ad2      	subs	r2, r2, r3
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a50 <prvHeapInit+0xb4>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	4a0a      	ldr	r2, [pc, #40]	@ (8002a54 <prvHeapInit+0xb8>)
 8002a2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	4a09      	ldr	r2, [pc, #36]	@ (8002a58 <prvHeapInit+0xbc>)
 8002a32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002a34:	4b09      	ldr	r3, [pc, #36]	@ (8002a5c <prvHeapInit+0xc0>)
 8002a36:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002a3a:	601a      	str	r2, [r3, #0]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	20000460 	.word	0x20000460
 8002a4c:	20004060 	.word	0x20004060
 8002a50:	20004068 	.word	0x20004068
 8002a54:	20004070 	.word	0x20004070
 8002a58:	2000406c 	.word	0x2000406c
 8002a5c:	2000407c 	.word	0x2000407c

08002a60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a68:	4b28      	ldr	r3, [pc, #160]	@ (8002b0c <prvInsertBlockIntoFreeList+0xac>)
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e002      	b.n	8002a74 <prvInsertBlockIntoFreeList+0x14>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d8f7      	bhi.n	8002a6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	4413      	add	r3, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d108      	bne.n	8002aa2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	441a      	add	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	441a      	add	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d118      	bne.n	8002ae8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4b15      	ldr	r3, [pc, #84]	@ (8002b10 <prvInsertBlockIntoFreeList+0xb0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d00d      	beq.n	8002ade <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	441a      	add	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	e008      	b.n	8002af0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002ade:	4b0c      	ldr	r3, [pc, #48]	@ (8002b10 <prvInsertBlockIntoFreeList+0xb0>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e003      	b.n	8002af0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d002      	beq.n	8002afe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002afe:	bf00      	nop
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20004060 	.word	0x20004060
 8002b10:	20004068 	.word	0x20004068

08002b14 <sniprintf>:
 8002b14:	b40c      	push	{r2, r3}
 8002b16:	b530      	push	{r4, r5, lr}
 8002b18:	4b18      	ldr	r3, [pc, #96]	@ (8002b7c <sniprintf+0x68>)
 8002b1a:	1e0c      	subs	r4, r1, #0
 8002b1c:	681d      	ldr	r5, [r3, #0]
 8002b1e:	b09d      	sub	sp, #116	@ 0x74
 8002b20:	da08      	bge.n	8002b34 <sniprintf+0x20>
 8002b22:	238b      	movs	r3, #139	@ 0x8b
 8002b24:	602b      	str	r3, [r5, #0]
 8002b26:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2a:	b01d      	add	sp, #116	@ 0x74
 8002b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b30:	b002      	add	sp, #8
 8002b32:	4770      	bx	lr
 8002b34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002b38:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002b42:	bf14      	ite	ne
 8002b44:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002b48:	4623      	moveq	r3, r4
 8002b4a:	9304      	str	r3, [sp, #16]
 8002b4c:	9307      	str	r3, [sp, #28]
 8002b4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b52:	9002      	str	r0, [sp, #8]
 8002b54:	9006      	str	r0, [sp, #24]
 8002b56:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002b5a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002b5c:	ab21      	add	r3, sp, #132	@ 0x84
 8002b5e:	a902      	add	r1, sp, #8
 8002b60:	4628      	mov	r0, r5
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	f000 f9b4 	bl	8002ed0 <_svfiprintf_r>
 8002b68:	1c43      	adds	r3, r0, #1
 8002b6a:	bfbc      	itt	lt
 8002b6c:	238b      	movlt	r3, #139	@ 0x8b
 8002b6e:	602b      	strlt	r3, [r5, #0]
 8002b70:	2c00      	cmp	r4, #0
 8002b72:	d0da      	beq.n	8002b2a <sniprintf+0x16>
 8002b74:	9b02      	ldr	r3, [sp, #8]
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	e7d6      	b.n	8002b2a <sniprintf+0x16>
 8002b7c:	20000008 	.word	0x20000008

08002b80 <memset>:
 8002b80:	4402      	add	r2, r0
 8002b82:	4603      	mov	r3, r0
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d100      	bne.n	8002b8a <memset+0xa>
 8002b88:	4770      	bx	lr
 8002b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b8e:	e7f9      	b.n	8002b84 <memset+0x4>

08002b90 <strncmp>:
 8002b90:	b510      	push	{r4, lr}
 8002b92:	b16a      	cbz	r2, 8002bb0 <strncmp+0x20>
 8002b94:	3901      	subs	r1, #1
 8002b96:	1884      	adds	r4, r0, r2
 8002b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b9c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d103      	bne.n	8002bac <strncmp+0x1c>
 8002ba4:	42a0      	cmp	r0, r4
 8002ba6:	d001      	beq.n	8002bac <strncmp+0x1c>
 8002ba8:	2a00      	cmp	r2, #0
 8002baa:	d1f5      	bne.n	8002b98 <strncmp+0x8>
 8002bac:	1ad0      	subs	r0, r2, r3
 8002bae:	bd10      	pop	{r4, pc}
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	e7fc      	b.n	8002bae <strncmp+0x1e>

08002bb4 <__errno>:
 8002bb4:	4b01      	ldr	r3, [pc, #4]	@ (8002bbc <__errno+0x8>)
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	20000008 	.word	0x20000008

08002bc0 <__libc_init_array>:
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	4d0d      	ldr	r5, [pc, #52]	@ (8002bf8 <__libc_init_array+0x38>)
 8002bc4:	4c0d      	ldr	r4, [pc, #52]	@ (8002bfc <__libc_init_array+0x3c>)
 8002bc6:	1b64      	subs	r4, r4, r5
 8002bc8:	10a4      	asrs	r4, r4, #2
 8002bca:	2600      	movs	r6, #0
 8002bcc:	42a6      	cmp	r6, r4
 8002bce:	d109      	bne.n	8002be4 <__libc_init_array+0x24>
 8002bd0:	4d0b      	ldr	r5, [pc, #44]	@ (8002c00 <__libc_init_array+0x40>)
 8002bd2:	4c0c      	ldr	r4, [pc, #48]	@ (8002c04 <__libc_init_array+0x44>)
 8002bd4:	f000 fc64 	bl	80034a0 <_init>
 8002bd8:	1b64      	subs	r4, r4, r5
 8002bda:	10a4      	asrs	r4, r4, #2
 8002bdc:	2600      	movs	r6, #0
 8002bde:	42a6      	cmp	r6, r4
 8002be0:	d105      	bne.n	8002bee <__libc_init_array+0x2e>
 8002be2:	bd70      	pop	{r4, r5, r6, pc}
 8002be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be8:	4798      	blx	r3
 8002bea:	3601      	adds	r6, #1
 8002bec:	e7ee      	b.n	8002bcc <__libc_init_array+0xc>
 8002bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf2:	4798      	blx	r3
 8002bf4:	3601      	adds	r6, #1
 8002bf6:	e7f2      	b.n	8002bde <__libc_init_array+0x1e>
 8002bf8:	08003e84 	.word	0x08003e84
 8002bfc:	08003e84 	.word	0x08003e84
 8002c00:	08003e84 	.word	0x08003e84
 8002c04:	08003e88 	.word	0x08003e88

08002c08 <__retarget_lock_acquire_recursive>:
 8002c08:	4770      	bx	lr

08002c0a <__retarget_lock_release_recursive>:
 8002c0a:	4770      	bx	lr

08002c0c <memcpy>:
 8002c0c:	440a      	add	r2, r1
 8002c0e:	4291      	cmp	r1, r2
 8002c10:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c14:	d100      	bne.n	8002c18 <memcpy+0xc>
 8002c16:	4770      	bx	lr
 8002c18:	b510      	push	{r4, lr}
 8002c1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c22:	4291      	cmp	r1, r2
 8002c24:	d1f9      	bne.n	8002c1a <memcpy+0xe>
 8002c26:	bd10      	pop	{r4, pc}

08002c28 <_free_r>:
 8002c28:	b538      	push	{r3, r4, r5, lr}
 8002c2a:	4605      	mov	r5, r0
 8002c2c:	2900      	cmp	r1, #0
 8002c2e:	d041      	beq.n	8002cb4 <_free_r+0x8c>
 8002c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c34:	1f0c      	subs	r4, r1, #4
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	bfb8      	it	lt
 8002c3a:	18e4      	addlt	r4, r4, r3
 8002c3c:	f000 f8e0 	bl	8002e00 <__malloc_lock>
 8002c40:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb8 <_free_r+0x90>)
 8002c42:	6813      	ldr	r3, [r2, #0]
 8002c44:	b933      	cbnz	r3, 8002c54 <_free_r+0x2c>
 8002c46:	6063      	str	r3, [r4, #4]
 8002c48:	6014      	str	r4, [r2, #0]
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c50:	f000 b8dc 	b.w	8002e0c <__malloc_unlock>
 8002c54:	42a3      	cmp	r3, r4
 8002c56:	d908      	bls.n	8002c6a <_free_r+0x42>
 8002c58:	6820      	ldr	r0, [r4, #0]
 8002c5a:	1821      	adds	r1, r4, r0
 8002c5c:	428b      	cmp	r3, r1
 8002c5e:	bf01      	itttt	eq
 8002c60:	6819      	ldreq	r1, [r3, #0]
 8002c62:	685b      	ldreq	r3, [r3, #4]
 8002c64:	1809      	addeq	r1, r1, r0
 8002c66:	6021      	streq	r1, [r4, #0]
 8002c68:	e7ed      	b.n	8002c46 <_free_r+0x1e>
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	b10b      	cbz	r3, 8002c74 <_free_r+0x4c>
 8002c70:	42a3      	cmp	r3, r4
 8002c72:	d9fa      	bls.n	8002c6a <_free_r+0x42>
 8002c74:	6811      	ldr	r1, [r2, #0]
 8002c76:	1850      	adds	r0, r2, r1
 8002c78:	42a0      	cmp	r0, r4
 8002c7a:	d10b      	bne.n	8002c94 <_free_r+0x6c>
 8002c7c:	6820      	ldr	r0, [r4, #0]
 8002c7e:	4401      	add	r1, r0
 8002c80:	1850      	adds	r0, r2, r1
 8002c82:	4283      	cmp	r3, r0
 8002c84:	6011      	str	r1, [r2, #0]
 8002c86:	d1e0      	bne.n	8002c4a <_free_r+0x22>
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	6053      	str	r3, [r2, #4]
 8002c8e:	4408      	add	r0, r1
 8002c90:	6010      	str	r0, [r2, #0]
 8002c92:	e7da      	b.n	8002c4a <_free_r+0x22>
 8002c94:	d902      	bls.n	8002c9c <_free_r+0x74>
 8002c96:	230c      	movs	r3, #12
 8002c98:	602b      	str	r3, [r5, #0]
 8002c9a:	e7d6      	b.n	8002c4a <_free_r+0x22>
 8002c9c:	6820      	ldr	r0, [r4, #0]
 8002c9e:	1821      	adds	r1, r4, r0
 8002ca0:	428b      	cmp	r3, r1
 8002ca2:	bf04      	itt	eq
 8002ca4:	6819      	ldreq	r1, [r3, #0]
 8002ca6:	685b      	ldreq	r3, [r3, #4]
 8002ca8:	6063      	str	r3, [r4, #4]
 8002caa:	bf04      	itt	eq
 8002cac:	1809      	addeq	r1, r1, r0
 8002cae:	6021      	streq	r1, [r4, #0]
 8002cb0:	6054      	str	r4, [r2, #4]
 8002cb2:	e7ca      	b.n	8002c4a <_free_r+0x22>
 8002cb4:	bd38      	pop	{r3, r4, r5, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200041c4 	.word	0x200041c4

08002cbc <sbrk_aligned>:
 8002cbc:	b570      	push	{r4, r5, r6, lr}
 8002cbe:	4e0f      	ldr	r6, [pc, #60]	@ (8002cfc <sbrk_aligned+0x40>)
 8002cc0:	460c      	mov	r4, r1
 8002cc2:	6831      	ldr	r1, [r6, #0]
 8002cc4:	4605      	mov	r5, r0
 8002cc6:	b911      	cbnz	r1, 8002cce <sbrk_aligned+0x12>
 8002cc8:	f000 fba4 	bl	8003414 <_sbrk_r>
 8002ccc:	6030      	str	r0, [r6, #0]
 8002cce:	4621      	mov	r1, r4
 8002cd0:	4628      	mov	r0, r5
 8002cd2:	f000 fb9f 	bl	8003414 <_sbrk_r>
 8002cd6:	1c43      	adds	r3, r0, #1
 8002cd8:	d103      	bne.n	8002ce2 <sbrk_aligned+0x26>
 8002cda:	f04f 34ff 	mov.w	r4, #4294967295
 8002cde:	4620      	mov	r0, r4
 8002ce0:	bd70      	pop	{r4, r5, r6, pc}
 8002ce2:	1cc4      	adds	r4, r0, #3
 8002ce4:	f024 0403 	bic.w	r4, r4, #3
 8002ce8:	42a0      	cmp	r0, r4
 8002cea:	d0f8      	beq.n	8002cde <sbrk_aligned+0x22>
 8002cec:	1a21      	subs	r1, r4, r0
 8002cee:	4628      	mov	r0, r5
 8002cf0:	f000 fb90 	bl	8003414 <_sbrk_r>
 8002cf4:	3001      	adds	r0, #1
 8002cf6:	d1f2      	bne.n	8002cde <sbrk_aligned+0x22>
 8002cf8:	e7ef      	b.n	8002cda <sbrk_aligned+0x1e>
 8002cfa:	bf00      	nop
 8002cfc:	200041c0 	.word	0x200041c0

08002d00 <_malloc_r>:
 8002d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d04:	1ccd      	adds	r5, r1, #3
 8002d06:	f025 0503 	bic.w	r5, r5, #3
 8002d0a:	3508      	adds	r5, #8
 8002d0c:	2d0c      	cmp	r5, #12
 8002d0e:	bf38      	it	cc
 8002d10:	250c      	movcc	r5, #12
 8002d12:	2d00      	cmp	r5, #0
 8002d14:	4606      	mov	r6, r0
 8002d16:	db01      	blt.n	8002d1c <_malloc_r+0x1c>
 8002d18:	42a9      	cmp	r1, r5
 8002d1a:	d904      	bls.n	8002d26 <_malloc_r+0x26>
 8002d1c:	230c      	movs	r3, #12
 8002d1e:	6033      	str	r3, [r6, #0]
 8002d20:	2000      	movs	r0, #0
 8002d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002dfc <_malloc_r+0xfc>
 8002d2a:	f000 f869 	bl	8002e00 <__malloc_lock>
 8002d2e:	f8d8 3000 	ldr.w	r3, [r8]
 8002d32:	461c      	mov	r4, r3
 8002d34:	bb44      	cbnz	r4, 8002d88 <_malloc_r+0x88>
 8002d36:	4629      	mov	r1, r5
 8002d38:	4630      	mov	r0, r6
 8002d3a:	f7ff ffbf 	bl	8002cbc <sbrk_aligned>
 8002d3e:	1c43      	adds	r3, r0, #1
 8002d40:	4604      	mov	r4, r0
 8002d42:	d158      	bne.n	8002df6 <_malloc_r+0xf6>
 8002d44:	f8d8 4000 	ldr.w	r4, [r8]
 8002d48:	4627      	mov	r7, r4
 8002d4a:	2f00      	cmp	r7, #0
 8002d4c:	d143      	bne.n	8002dd6 <_malloc_r+0xd6>
 8002d4e:	2c00      	cmp	r4, #0
 8002d50:	d04b      	beq.n	8002dea <_malloc_r+0xea>
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	4639      	mov	r1, r7
 8002d56:	4630      	mov	r0, r6
 8002d58:	eb04 0903 	add.w	r9, r4, r3
 8002d5c:	f000 fb5a 	bl	8003414 <_sbrk_r>
 8002d60:	4581      	cmp	r9, r0
 8002d62:	d142      	bne.n	8002dea <_malloc_r+0xea>
 8002d64:	6821      	ldr	r1, [r4, #0]
 8002d66:	1a6d      	subs	r5, r5, r1
 8002d68:	4629      	mov	r1, r5
 8002d6a:	4630      	mov	r0, r6
 8002d6c:	f7ff ffa6 	bl	8002cbc <sbrk_aligned>
 8002d70:	3001      	adds	r0, #1
 8002d72:	d03a      	beq.n	8002dea <_malloc_r+0xea>
 8002d74:	6823      	ldr	r3, [r4, #0]
 8002d76:	442b      	add	r3, r5
 8002d78:	6023      	str	r3, [r4, #0]
 8002d7a:	f8d8 3000 	ldr.w	r3, [r8]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	bb62      	cbnz	r2, 8002ddc <_malloc_r+0xdc>
 8002d82:	f8c8 7000 	str.w	r7, [r8]
 8002d86:	e00f      	b.n	8002da8 <_malloc_r+0xa8>
 8002d88:	6822      	ldr	r2, [r4, #0]
 8002d8a:	1b52      	subs	r2, r2, r5
 8002d8c:	d420      	bmi.n	8002dd0 <_malloc_r+0xd0>
 8002d8e:	2a0b      	cmp	r2, #11
 8002d90:	d917      	bls.n	8002dc2 <_malloc_r+0xc2>
 8002d92:	1961      	adds	r1, r4, r5
 8002d94:	42a3      	cmp	r3, r4
 8002d96:	6025      	str	r5, [r4, #0]
 8002d98:	bf18      	it	ne
 8002d9a:	6059      	strne	r1, [r3, #4]
 8002d9c:	6863      	ldr	r3, [r4, #4]
 8002d9e:	bf08      	it	eq
 8002da0:	f8c8 1000 	streq.w	r1, [r8]
 8002da4:	5162      	str	r2, [r4, r5]
 8002da6:	604b      	str	r3, [r1, #4]
 8002da8:	4630      	mov	r0, r6
 8002daa:	f000 f82f 	bl	8002e0c <__malloc_unlock>
 8002dae:	f104 000b 	add.w	r0, r4, #11
 8002db2:	1d23      	adds	r3, r4, #4
 8002db4:	f020 0007 	bic.w	r0, r0, #7
 8002db8:	1ac2      	subs	r2, r0, r3
 8002dba:	bf1c      	itt	ne
 8002dbc:	1a1b      	subne	r3, r3, r0
 8002dbe:	50a3      	strne	r3, [r4, r2]
 8002dc0:	e7af      	b.n	8002d22 <_malloc_r+0x22>
 8002dc2:	6862      	ldr	r2, [r4, #4]
 8002dc4:	42a3      	cmp	r3, r4
 8002dc6:	bf0c      	ite	eq
 8002dc8:	f8c8 2000 	streq.w	r2, [r8]
 8002dcc:	605a      	strne	r2, [r3, #4]
 8002dce:	e7eb      	b.n	8002da8 <_malloc_r+0xa8>
 8002dd0:	4623      	mov	r3, r4
 8002dd2:	6864      	ldr	r4, [r4, #4]
 8002dd4:	e7ae      	b.n	8002d34 <_malloc_r+0x34>
 8002dd6:	463c      	mov	r4, r7
 8002dd8:	687f      	ldr	r7, [r7, #4]
 8002dda:	e7b6      	b.n	8002d4a <_malloc_r+0x4a>
 8002ddc:	461a      	mov	r2, r3
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	42a3      	cmp	r3, r4
 8002de2:	d1fb      	bne.n	8002ddc <_malloc_r+0xdc>
 8002de4:	2300      	movs	r3, #0
 8002de6:	6053      	str	r3, [r2, #4]
 8002de8:	e7de      	b.n	8002da8 <_malloc_r+0xa8>
 8002dea:	230c      	movs	r3, #12
 8002dec:	6033      	str	r3, [r6, #0]
 8002dee:	4630      	mov	r0, r6
 8002df0:	f000 f80c 	bl	8002e0c <__malloc_unlock>
 8002df4:	e794      	b.n	8002d20 <_malloc_r+0x20>
 8002df6:	6005      	str	r5, [r0, #0]
 8002df8:	e7d6      	b.n	8002da8 <_malloc_r+0xa8>
 8002dfa:	bf00      	nop
 8002dfc:	200041c4 	.word	0x200041c4

08002e00 <__malloc_lock>:
 8002e00:	4801      	ldr	r0, [pc, #4]	@ (8002e08 <__malloc_lock+0x8>)
 8002e02:	f7ff bf01 	b.w	8002c08 <__retarget_lock_acquire_recursive>
 8002e06:	bf00      	nop
 8002e08:	200041bc 	.word	0x200041bc

08002e0c <__malloc_unlock>:
 8002e0c:	4801      	ldr	r0, [pc, #4]	@ (8002e14 <__malloc_unlock+0x8>)
 8002e0e:	f7ff befc 	b.w	8002c0a <__retarget_lock_release_recursive>
 8002e12:	bf00      	nop
 8002e14:	200041bc 	.word	0x200041bc

08002e18 <__ssputs_r>:
 8002e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e1c:	688e      	ldr	r6, [r1, #8]
 8002e1e:	461f      	mov	r7, r3
 8002e20:	42be      	cmp	r6, r7
 8002e22:	680b      	ldr	r3, [r1, #0]
 8002e24:	4682      	mov	sl, r0
 8002e26:	460c      	mov	r4, r1
 8002e28:	4690      	mov	r8, r2
 8002e2a:	d82d      	bhi.n	8002e88 <__ssputs_r+0x70>
 8002e2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002e34:	d026      	beq.n	8002e84 <__ssputs_r+0x6c>
 8002e36:	6965      	ldr	r5, [r4, #20]
 8002e38:	6909      	ldr	r1, [r1, #16]
 8002e3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e3e:	eba3 0901 	sub.w	r9, r3, r1
 8002e42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e46:	1c7b      	adds	r3, r7, #1
 8002e48:	444b      	add	r3, r9
 8002e4a:	106d      	asrs	r5, r5, #1
 8002e4c:	429d      	cmp	r5, r3
 8002e4e:	bf38      	it	cc
 8002e50:	461d      	movcc	r5, r3
 8002e52:	0553      	lsls	r3, r2, #21
 8002e54:	d527      	bpl.n	8002ea6 <__ssputs_r+0x8e>
 8002e56:	4629      	mov	r1, r5
 8002e58:	f7ff ff52 	bl	8002d00 <_malloc_r>
 8002e5c:	4606      	mov	r6, r0
 8002e5e:	b360      	cbz	r0, 8002eba <__ssputs_r+0xa2>
 8002e60:	6921      	ldr	r1, [r4, #16]
 8002e62:	464a      	mov	r2, r9
 8002e64:	f7ff fed2 	bl	8002c0c <memcpy>
 8002e68:	89a3      	ldrh	r3, [r4, #12]
 8002e6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e72:	81a3      	strh	r3, [r4, #12]
 8002e74:	6126      	str	r6, [r4, #16]
 8002e76:	6165      	str	r5, [r4, #20]
 8002e78:	444e      	add	r6, r9
 8002e7a:	eba5 0509 	sub.w	r5, r5, r9
 8002e7e:	6026      	str	r6, [r4, #0]
 8002e80:	60a5      	str	r5, [r4, #8]
 8002e82:	463e      	mov	r6, r7
 8002e84:	42be      	cmp	r6, r7
 8002e86:	d900      	bls.n	8002e8a <__ssputs_r+0x72>
 8002e88:	463e      	mov	r6, r7
 8002e8a:	6820      	ldr	r0, [r4, #0]
 8002e8c:	4632      	mov	r2, r6
 8002e8e:	4641      	mov	r1, r8
 8002e90:	f000 faa6 	bl	80033e0 <memmove>
 8002e94:	68a3      	ldr	r3, [r4, #8]
 8002e96:	1b9b      	subs	r3, r3, r6
 8002e98:	60a3      	str	r3, [r4, #8]
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	4433      	add	r3, r6
 8002e9e:	6023      	str	r3, [r4, #0]
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ea6:	462a      	mov	r2, r5
 8002ea8:	f000 fac4 	bl	8003434 <_realloc_r>
 8002eac:	4606      	mov	r6, r0
 8002eae:	2800      	cmp	r0, #0
 8002eb0:	d1e0      	bne.n	8002e74 <__ssputs_r+0x5c>
 8002eb2:	6921      	ldr	r1, [r4, #16]
 8002eb4:	4650      	mov	r0, sl
 8002eb6:	f7ff feb7 	bl	8002c28 <_free_r>
 8002eba:	230c      	movs	r3, #12
 8002ebc:	f8ca 3000 	str.w	r3, [sl]
 8002ec0:	89a3      	ldrh	r3, [r4, #12]
 8002ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ec6:	81a3      	strh	r3, [r4, #12]
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	e7e9      	b.n	8002ea2 <__ssputs_r+0x8a>
	...

08002ed0 <_svfiprintf_r>:
 8002ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ed4:	4698      	mov	r8, r3
 8002ed6:	898b      	ldrh	r3, [r1, #12]
 8002ed8:	061b      	lsls	r3, r3, #24
 8002eda:	b09d      	sub	sp, #116	@ 0x74
 8002edc:	4607      	mov	r7, r0
 8002ede:	460d      	mov	r5, r1
 8002ee0:	4614      	mov	r4, r2
 8002ee2:	d510      	bpl.n	8002f06 <_svfiprintf_r+0x36>
 8002ee4:	690b      	ldr	r3, [r1, #16]
 8002ee6:	b973      	cbnz	r3, 8002f06 <_svfiprintf_r+0x36>
 8002ee8:	2140      	movs	r1, #64	@ 0x40
 8002eea:	f7ff ff09 	bl	8002d00 <_malloc_r>
 8002eee:	6028      	str	r0, [r5, #0]
 8002ef0:	6128      	str	r0, [r5, #16]
 8002ef2:	b930      	cbnz	r0, 8002f02 <_svfiprintf_r+0x32>
 8002ef4:	230c      	movs	r3, #12
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8002efc:	b01d      	add	sp, #116	@ 0x74
 8002efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f02:	2340      	movs	r3, #64	@ 0x40
 8002f04:	616b      	str	r3, [r5, #20]
 8002f06:	2300      	movs	r3, #0
 8002f08:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f0a:	2320      	movs	r3, #32
 8002f0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002f10:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f14:	2330      	movs	r3, #48	@ 0x30
 8002f16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80030b4 <_svfiprintf_r+0x1e4>
 8002f1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002f1e:	f04f 0901 	mov.w	r9, #1
 8002f22:	4623      	mov	r3, r4
 8002f24:	469a      	mov	sl, r3
 8002f26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f2a:	b10a      	cbz	r2, 8002f30 <_svfiprintf_r+0x60>
 8002f2c:	2a25      	cmp	r2, #37	@ 0x25
 8002f2e:	d1f9      	bne.n	8002f24 <_svfiprintf_r+0x54>
 8002f30:	ebba 0b04 	subs.w	fp, sl, r4
 8002f34:	d00b      	beq.n	8002f4e <_svfiprintf_r+0x7e>
 8002f36:	465b      	mov	r3, fp
 8002f38:	4622      	mov	r2, r4
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	4638      	mov	r0, r7
 8002f3e:	f7ff ff6b 	bl	8002e18 <__ssputs_r>
 8002f42:	3001      	adds	r0, #1
 8002f44:	f000 80a7 	beq.w	8003096 <_svfiprintf_r+0x1c6>
 8002f48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f4a:	445a      	add	r2, fp
 8002f4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 809f 	beq.w	8003096 <_svfiprintf_r+0x1c6>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f62:	f10a 0a01 	add.w	sl, sl, #1
 8002f66:	9304      	str	r3, [sp, #16]
 8002f68:	9307      	str	r3, [sp, #28]
 8002f6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f70:	4654      	mov	r4, sl
 8002f72:	2205      	movs	r2, #5
 8002f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f78:	484e      	ldr	r0, [pc, #312]	@ (80030b4 <_svfiprintf_r+0x1e4>)
 8002f7a:	f7fd f959 	bl	8000230 <memchr>
 8002f7e:	9a04      	ldr	r2, [sp, #16]
 8002f80:	b9d8      	cbnz	r0, 8002fba <_svfiprintf_r+0xea>
 8002f82:	06d0      	lsls	r0, r2, #27
 8002f84:	bf44      	itt	mi
 8002f86:	2320      	movmi	r3, #32
 8002f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f8c:	0711      	lsls	r1, r2, #28
 8002f8e:	bf44      	itt	mi
 8002f90:	232b      	movmi	r3, #43	@ 0x2b
 8002f92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f96:	f89a 3000 	ldrb.w	r3, [sl]
 8002f9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f9c:	d015      	beq.n	8002fca <_svfiprintf_r+0xfa>
 8002f9e:	9a07      	ldr	r2, [sp, #28]
 8002fa0:	4654      	mov	r4, sl
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f04f 0c0a 	mov.w	ip, #10
 8002fa8:	4621      	mov	r1, r4
 8002faa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fae:	3b30      	subs	r3, #48	@ 0x30
 8002fb0:	2b09      	cmp	r3, #9
 8002fb2:	d94b      	bls.n	800304c <_svfiprintf_r+0x17c>
 8002fb4:	b1b0      	cbz	r0, 8002fe4 <_svfiprintf_r+0x114>
 8002fb6:	9207      	str	r2, [sp, #28]
 8002fb8:	e014      	b.n	8002fe4 <_svfiprintf_r+0x114>
 8002fba:	eba0 0308 	sub.w	r3, r0, r8
 8002fbe:	fa09 f303 	lsl.w	r3, r9, r3
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	9304      	str	r3, [sp, #16]
 8002fc6:	46a2      	mov	sl, r4
 8002fc8:	e7d2      	b.n	8002f70 <_svfiprintf_r+0xa0>
 8002fca:	9b03      	ldr	r3, [sp, #12]
 8002fcc:	1d19      	adds	r1, r3, #4
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	9103      	str	r1, [sp, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	bfbb      	ittet	lt
 8002fd6:	425b      	neglt	r3, r3
 8002fd8:	f042 0202 	orrlt.w	r2, r2, #2
 8002fdc:	9307      	strge	r3, [sp, #28]
 8002fde:	9307      	strlt	r3, [sp, #28]
 8002fe0:	bfb8      	it	lt
 8002fe2:	9204      	strlt	r2, [sp, #16]
 8002fe4:	7823      	ldrb	r3, [r4, #0]
 8002fe6:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fe8:	d10a      	bne.n	8003000 <_svfiprintf_r+0x130>
 8002fea:	7863      	ldrb	r3, [r4, #1]
 8002fec:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fee:	d132      	bne.n	8003056 <_svfiprintf_r+0x186>
 8002ff0:	9b03      	ldr	r3, [sp, #12]
 8002ff2:	1d1a      	adds	r2, r3, #4
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	9203      	str	r2, [sp, #12]
 8002ff8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002ffc:	3402      	adds	r4, #2
 8002ffe:	9305      	str	r3, [sp, #20]
 8003000:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80030c4 <_svfiprintf_r+0x1f4>
 8003004:	7821      	ldrb	r1, [r4, #0]
 8003006:	2203      	movs	r2, #3
 8003008:	4650      	mov	r0, sl
 800300a:	f7fd f911 	bl	8000230 <memchr>
 800300e:	b138      	cbz	r0, 8003020 <_svfiprintf_r+0x150>
 8003010:	9b04      	ldr	r3, [sp, #16]
 8003012:	eba0 000a 	sub.w	r0, r0, sl
 8003016:	2240      	movs	r2, #64	@ 0x40
 8003018:	4082      	lsls	r2, r0
 800301a:	4313      	orrs	r3, r2
 800301c:	3401      	adds	r4, #1
 800301e:	9304      	str	r3, [sp, #16]
 8003020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003024:	4824      	ldr	r0, [pc, #144]	@ (80030b8 <_svfiprintf_r+0x1e8>)
 8003026:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800302a:	2206      	movs	r2, #6
 800302c:	f7fd f900 	bl	8000230 <memchr>
 8003030:	2800      	cmp	r0, #0
 8003032:	d036      	beq.n	80030a2 <_svfiprintf_r+0x1d2>
 8003034:	4b21      	ldr	r3, [pc, #132]	@ (80030bc <_svfiprintf_r+0x1ec>)
 8003036:	bb1b      	cbnz	r3, 8003080 <_svfiprintf_r+0x1b0>
 8003038:	9b03      	ldr	r3, [sp, #12]
 800303a:	3307      	adds	r3, #7
 800303c:	f023 0307 	bic.w	r3, r3, #7
 8003040:	3308      	adds	r3, #8
 8003042:	9303      	str	r3, [sp, #12]
 8003044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003046:	4433      	add	r3, r6
 8003048:	9309      	str	r3, [sp, #36]	@ 0x24
 800304a:	e76a      	b.n	8002f22 <_svfiprintf_r+0x52>
 800304c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003050:	460c      	mov	r4, r1
 8003052:	2001      	movs	r0, #1
 8003054:	e7a8      	b.n	8002fa8 <_svfiprintf_r+0xd8>
 8003056:	2300      	movs	r3, #0
 8003058:	3401      	adds	r4, #1
 800305a:	9305      	str	r3, [sp, #20]
 800305c:	4619      	mov	r1, r3
 800305e:	f04f 0c0a 	mov.w	ip, #10
 8003062:	4620      	mov	r0, r4
 8003064:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003068:	3a30      	subs	r2, #48	@ 0x30
 800306a:	2a09      	cmp	r2, #9
 800306c:	d903      	bls.n	8003076 <_svfiprintf_r+0x1a6>
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0c6      	beq.n	8003000 <_svfiprintf_r+0x130>
 8003072:	9105      	str	r1, [sp, #20]
 8003074:	e7c4      	b.n	8003000 <_svfiprintf_r+0x130>
 8003076:	fb0c 2101 	mla	r1, ip, r1, r2
 800307a:	4604      	mov	r4, r0
 800307c:	2301      	movs	r3, #1
 800307e:	e7f0      	b.n	8003062 <_svfiprintf_r+0x192>
 8003080:	ab03      	add	r3, sp, #12
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	462a      	mov	r2, r5
 8003086:	4b0e      	ldr	r3, [pc, #56]	@ (80030c0 <_svfiprintf_r+0x1f0>)
 8003088:	a904      	add	r1, sp, #16
 800308a:	4638      	mov	r0, r7
 800308c:	f3af 8000 	nop.w
 8003090:	1c42      	adds	r2, r0, #1
 8003092:	4606      	mov	r6, r0
 8003094:	d1d6      	bne.n	8003044 <_svfiprintf_r+0x174>
 8003096:	89ab      	ldrh	r3, [r5, #12]
 8003098:	065b      	lsls	r3, r3, #25
 800309a:	f53f af2d 	bmi.w	8002ef8 <_svfiprintf_r+0x28>
 800309e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80030a0:	e72c      	b.n	8002efc <_svfiprintf_r+0x2c>
 80030a2:	ab03      	add	r3, sp, #12
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	462a      	mov	r2, r5
 80030a8:	4b05      	ldr	r3, [pc, #20]	@ (80030c0 <_svfiprintf_r+0x1f0>)
 80030aa:	a904      	add	r1, sp, #16
 80030ac:	4638      	mov	r0, r7
 80030ae:	f000 f879 	bl	80031a4 <_printf_i>
 80030b2:	e7ed      	b.n	8003090 <_svfiprintf_r+0x1c0>
 80030b4:	08003e46 	.word	0x08003e46
 80030b8:	08003e50 	.word	0x08003e50
 80030bc:	00000000 	.word	0x00000000
 80030c0:	08002e19 	.word	0x08002e19
 80030c4:	08003e4c 	.word	0x08003e4c

080030c8 <_printf_common>:
 80030c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030cc:	4616      	mov	r6, r2
 80030ce:	4698      	mov	r8, r3
 80030d0:	688a      	ldr	r2, [r1, #8]
 80030d2:	690b      	ldr	r3, [r1, #16]
 80030d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80030d8:	4293      	cmp	r3, r2
 80030da:	bfb8      	it	lt
 80030dc:	4613      	movlt	r3, r2
 80030de:	6033      	str	r3, [r6, #0]
 80030e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80030e4:	4607      	mov	r7, r0
 80030e6:	460c      	mov	r4, r1
 80030e8:	b10a      	cbz	r2, 80030ee <_printf_common+0x26>
 80030ea:	3301      	adds	r3, #1
 80030ec:	6033      	str	r3, [r6, #0]
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	0699      	lsls	r1, r3, #26
 80030f2:	bf42      	ittt	mi
 80030f4:	6833      	ldrmi	r3, [r6, #0]
 80030f6:	3302      	addmi	r3, #2
 80030f8:	6033      	strmi	r3, [r6, #0]
 80030fa:	6825      	ldr	r5, [r4, #0]
 80030fc:	f015 0506 	ands.w	r5, r5, #6
 8003100:	d106      	bne.n	8003110 <_printf_common+0x48>
 8003102:	f104 0a19 	add.w	sl, r4, #25
 8003106:	68e3      	ldr	r3, [r4, #12]
 8003108:	6832      	ldr	r2, [r6, #0]
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	42ab      	cmp	r3, r5
 800310e:	dc26      	bgt.n	800315e <_printf_common+0x96>
 8003110:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003114:	6822      	ldr	r2, [r4, #0]
 8003116:	3b00      	subs	r3, #0
 8003118:	bf18      	it	ne
 800311a:	2301      	movne	r3, #1
 800311c:	0692      	lsls	r2, r2, #26
 800311e:	d42b      	bmi.n	8003178 <_printf_common+0xb0>
 8003120:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003124:	4641      	mov	r1, r8
 8003126:	4638      	mov	r0, r7
 8003128:	47c8      	blx	r9
 800312a:	3001      	adds	r0, #1
 800312c:	d01e      	beq.n	800316c <_printf_common+0xa4>
 800312e:	6823      	ldr	r3, [r4, #0]
 8003130:	6922      	ldr	r2, [r4, #16]
 8003132:	f003 0306 	and.w	r3, r3, #6
 8003136:	2b04      	cmp	r3, #4
 8003138:	bf02      	ittt	eq
 800313a:	68e5      	ldreq	r5, [r4, #12]
 800313c:	6833      	ldreq	r3, [r6, #0]
 800313e:	1aed      	subeq	r5, r5, r3
 8003140:	68a3      	ldr	r3, [r4, #8]
 8003142:	bf0c      	ite	eq
 8003144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003148:	2500      	movne	r5, #0
 800314a:	4293      	cmp	r3, r2
 800314c:	bfc4      	itt	gt
 800314e:	1a9b      	subgt	r3, r3, r2
 8003150:	18ed      	addgt	r5, r5, r3
 8003152:	2600      	movs	r6, #0
 8003154:	341a      	adds	r4, #26
 8003156:	42b5      	cmp	r5, r6
 8003158:	d11a      	bne.n	8003190 <_printf_common+0xc8>
 800315a:	2000      	movs	r0, #0
 800315c:	e008      	b.n	8003170 <_printf_common+0xa8>
 800315e:	2301      	movs	r3, #1
 8003160:	4652      	mov	r2, sl
 8003162:	4641      	mov	r1, r8
 8003164:	4638      	mov	r0, r7
 8003166:	47c8      	blx	r9
 8003168:	3001      	adds	r0, #1
 800316a:	d103      	bne.n	8003174 <_printf_common+0xac>
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003174:	3501      	adds	r5, #1
 8003176:	e7c6      	b.n	8003106 <_printf_common+0x3e>
 8003178:	18e1      	adds	r1, r4, r3
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	2030      	movs	r0, #48	@ 0x30
 800317e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003182:	4422      	add	r2, r4
 8003184:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003188:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800318c:	3302      	adds	r3, #2
 800318e:	e7c7      	b.n	8003120 <_printf_common+0x58>
 8003190:	2301      	movs	r3, #1
 8003192:	4622      	mov	r2, r4
 8003194:	4641      	mov	r1, r8
 8003196:	4638      	mov	r0, r7
 8003198:	47c8      	blx	r9
 800319a:	3001      	adds	r0, #1
 800319c:	d0e6      	beq.n	800316c <_printf_common+0xa4>
 800319e:	3601      	adds	r6, #1
 80031a0:	e7d9      	b.n	8003156 <_printf_common+0x8e>
	...

080031a4 <_printf_i>:
 80031a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031a8:	7e0f      	ldrb	r7, [r1, #24]
 80031aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80031ac:	2f78      	cmp	r7, #120	@ 0x78
 80031ae:	4691      	mov	r9, r2
 80031b0:	4680      	mov	r8, r0
 80031b2:	460c      	mov	r4, r1
 80031b4:	469a      	mov	sl, r3
 80031b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80031ba:	d807      	bhi.n	80031cc <_printf_i+0x28>
 80031bc:	2f62      	cmp	r7, #98	@ 0x62
 80031be:	d80a      	bhi.n	80031d6 <_printf_i+0x32>
 80031c0:	2f00      	cmp	r7, #0
 80031c2:	f000 80d1 	beq.w	8003368 <_printf_i+0x1c4>
 80031c6:	2f58      	cmp	r7, #88	@ 0x58
 80031c8:	f000 80b8 	beq.w	800333c <_printf_i+0x198>
 80031cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80031d4:	e03a      	b.n	800324c <_printf_i+0xa8>
 80031d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80031da:	2b15      	cmp	r3, #21
 80031dc:	d8f6      	bhi.n	80031cc <_printf_i+0x28>
 80031de:	a101      	add	r1, pc, #4	@ (adr r1, 80031e4 <_printf_i+0x40>)
 80031e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031e4:	0800323d 	.word	0x0800323d
 80031e8:	08003251 	.word	0x08003251
 80031ec:	080031cd 	.word	0x080031cd
 80031f0:	080031cd 	.word	0x080031cd
 80031f4:	080031cd 	.word	0x080031cd
 80031f8:	080031cd 	.word	0x080031cd
 80031fc:	08003251 	.word	0x08003251
 8003200:	080031cd 	.word	0x080031cd
 8003204:	080031cd 	.word	0x080031cd
 8003208:	080031cd 	.word	0x080031cd
 800320c:	080031cd 	.word	0x080031cd
 8003210:	0800334f 	.word	0x0800334f
 8003214:	0800327b 	.word	0x0800327b
 8003218:	08003309 	.word	0x08003309
 800321c:	080031cd 	.word	0x080031cd
 8003220:	080031cd 	.word	0x080031cd
 8003224:	08003371 	.word	0x08003371
 8003228:	080031cd 	.word	0x080031cd
 800322c:	0800327b 	.word	0x0800327b
 8003230:	080031cd 	.word	0x080031cd
 8003234:	080031cd 	.word	0x080031cd
 8003238:	08003311 	.word	0x08003311
 800323c:	6833      	ldr	r3, [r6, #0]
 800323e:	1d1a      	adds	r2, r3, #4
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6032      	str	r2, [r6, #0]
 8003244:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003248:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800324c:	2301      	movs	r3, #1
 800324e:	e09c      	b.n	800338a <_printf_i+0x1e6>
 8003250:	6833      	ldr	r3, [r6, #0]
 8003252:	6820      	ldr	r0, [r4, #0]
 8003254:	1d19      	adds	r1, r3, #4
 8003256:	6031      	str	r1, [r6, #0]
 8003258:	0606      	lsls	r6, r0, #24
 800325a:	d501      	bpl.n	8003260 <_printf_i+0xbc>
 800325c:	681d      	ldr	r5, [r3, #0]
 800325e:	e003      	b.n	8003268 <_printf_i+0xc4>
 8003260:	0645      	lsls	r5, r0, #25
 8003262:	d5fb      	bpl.n	800325c <_printf_i+0xb8>
 8003264:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003268:	2d00      	cmp	r5, #0
 800326a:	da03      	bge.n	8003274 <_printf_i+0xd0>
 800326c:	232d      	movs	r3, #45	@ 0x2d
 800326e:	426d      	negs	r5, r5
 8003270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003274:	4858      	ldr	r0, [pc, #352]	@ (80033d8 <_printf_i+0x234>)
 8003276:	230a      	movs	r3, #10
 8003278:	e011      	b.n	800329e <_printf_i+0xfa>
 800327a:	6821      	ldr	r1, [r4, #0]
 800327c:	6833      	ldr	r3, [r6, #0]
 800327e:	0608      	lsls	r0, r1, #24
 8003280:	f853 5b04 	ldr.w	r5, [r3], #4
 8003284:	d402      	bmi.n	800328c <_printf_i+0xe8>
 8003286:	0649      	lsls	r1, r1, #25
 8003288:	bf48      	it	mi
 800328a:	b2ad      	uxthmi	r5, r5
 800328c:	2f6f      	cmp	r7, #111	@ 0x6f
 800328e:	4852      	ldr	r0, [pc, #328]	@ (80033d8 <_printf_i+0x234>)
 8003290:	6033      	str	r3, [r6, #0]
 8003292:	bf14      	ite	ne
 8003294:	230a      	movne	r3, #10
 8003296:	2308      	moveq	r3, #8
 8003298:	2100      	movs	r1, #0
 800329a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800329e:	6866      	ldr	r6, [r4, #4]
 80032a0:	60a6      	str	r6, [r4, #8]
 80032a2:	2e00      	cmp	r6, #0
 80032a4:	db05      	blt.n	80032b2 <_printf_i+0x10e>
 80032a6:	6821      	ldr	r1, [r4, #0]
 80032a8:	432e      	orrs	r6, r5
 80032aa:	f021 0104 	bic.w	r1, r1, #4
 80032ae:	6021      	str	r1, [r4, #0]
 80032b0:	d04b      	beq.n	800334a <_printf_i+0x1a6>
 80032b2:	4616      	mov	r6, r2
 80032b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80032b8:	fb03 5711 	mls	r7, r3, r1, r5
 80032bc:	5dc7      	ldrb	r7, [r0, r7]
 80032be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80032c2:	462f      	mov	r7, r5
 80032c4:	42bb      	cmp	r3, r7
 80032c6:	460d      	mov	r5, r1
 80032c8:	d9f4      	bls.n	80032b4 <_printf_i+0x110>
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d10b      	bne.n	80032e6 <_printf_i+0x142>
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	07df      	lsls	r7, r3, #31
 80032d2:	d508      	bpl.n	80032e6 <_printf_i+0x142>
 80032d4:	6923      	ldr	r3, [r4, #16]
 80032d6:	6861      	ldr	r1, [r4, #4]
 80032d8:	4299      	cmp	r1, r3
 80032da:	bfde      	ittt	le
 80032dc:	2330      	movle	r3, #48	@ 0x30
 80032de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80032e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80032e6:	1b92      	subs	r2, r2, r6
 80032e8:	6122      	str	r2, [r4, #16]
 80032ea:	f8cd a000 	str.w	sl, [sp]
 80032ee:	464b      	mov	r3, r9
 80032f0:	aa03      	add	r2, sp, #12
 80032f2:	4621      	mov	r1, r4
 80032f4:	4640      	mov	r0, r8
 80032f6:	f7ff fee7 	bl	80030c8 <_printf_common>
 80032fa:	3001      	adds	r0, #1
 80032fc:	d14a      	bne.n	8003394 <_printf_i+0x1f0>
 80032fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003302:	b004      	add	sp, #16
 8003304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	f043 0320 	orr.w	r3, r3, #32
 800330e:	6023      	str	r3, [r4, #0]
 8003310:	4832      	ldr	r0, [pc, #200]	@ (80033dc <_printf_i+0x238>)
 8003312:	2778      	movs	r7, #120	@ 0x78
 8003314:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	6831      	ldr	r1, [r6, #0]
 800331c:	061f      	lsls	r7, r3, #24
 800331e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003322:	d402      	bmi.n	800332a <_printf_i+0x186>
 8003324:	065f      	lsls	r7, r3, #25
 8003326:	bf48      	it	mi
 8003328:	b2ad      	uxthmi	r5, r5
 800332a:	6031      	str	r1, [r6, #0]
 800332c:	07d9      	lsls	r1, r3, #31
 800332e:	bf44      	itt	mi
 8003330:	f043 0320 	orrmi.w	r3, r3, #32
 8003334:	6023      	strmi	r3, [r4, #0]
 8003336:	b11d      	cbz	r5, 8003340 <_printf_i+0x19c>
 8003338:	2310      	movs	r3, #16
 800333a:	e7ad      	b.n	8003298 <_printf_i+0xf4>
 800333c:	4826      	ldr	r0, [pc, #152]	@ (80033d8 <_printf_i+0x234>)
 800333e:	e7e9      	b.n	8003314 <_printf_i+0x170>
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	f023 0320 	bic.w	r3, r3, #32
 8003346:	6023      	str	r3, [r4, #0]
 8003348:	e7f6      	b.n	8003338 <_printf_i+0x194>
 800334a:	4616      	mov	r6, r2
 800334c:	e7bd      	b.n	80032ca <_printf_i+0x126>
 800334e:	6833      	ldr	r3, [r6, #0]
 8003350:	6825      	ldr	r5, [r4, #0]
 8003352:	6961      	ldr	r1, [r4, #20]
 8003354:	1d18      	adds	r0, r3, #4
 8003356:	6030      	str	r0, [r6, #0]
 8003358:	062e      	lsls	r6, r5, #24
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	d501      	bpl.n	8003362 <_printf_i+0x1be>
 800335e:	6019      	str	r1, [r3, #0]
 8003360:	e002      	b.n	8003368 <_printf_i+0x1c4>
 8003362:	0668      	lsls	r0, r5, #25
 8003364:	d5fb      	bpl.n	800335e <_printf_i+0x1ba>
 8003366:	8019      	strh	r1, [r3, #0]
 8003368:	2300      	movs	r3, #0
 800336a:	6123      	str	r3, [r4, #16]
 800336c:	4616      	mov	r6, r2
 800336e:	e7bc      	b.n	80032ea <_printf_i+0x146>
 8003370:	6833      	ldr	r3, [r6, #0]
 8003372:	1d1a      	adds	r2, r3, #4
 8003374:	6032      	str	r2, [r6, #0]
 8003376:	681e      	ldr	r6, [r3, #0]
 8003378:	6862      	ldr	r2, [r4, #4]
 800337a:	2100      	movs	r1, #0
 800337c:	4630      	mov	r0, r6
 800337e:	f7fc ff57 	bl	8000230 <memchr>
 8003382:	b108      	cbz	r0, 8003388 <_printf_i+0x1e4>
 8003384:	1b80      	subs	r0, r0, r6
 8003386:	6060      	str	r0, [r4, #4]
 8003388:	6863      	ldr	r3, [r4, #4]
 800338a:	6123      	str	r3, [r4, #16]
 800338c:	2300      	movs	r3, #0
 800338e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003392:	e7aa      	b.n	80032ea <_printf_i+0x146>
 8003394:	6923      	ldr	r3, [r4, #16]
 8003396:	4632      	mov	r2, r6
 8003398:	4649      	mov	r1, r9
 800339a:	4640      	mov	r0, r8
 800339c:	47d0      	blx	sl
 800339e:	3001      	adds	r0, #1
 80033a0:	d0ad      	beq.n	80032fe <_printf_i+0x15a>
 80033a2:	6823      	ldr	r3, [r4, #0]
 80033a4:	079b      	lsls	r3, r3, #30
 80033a6:	d413      	bmi.n	80033d0 <_printf_i+0x22c>
 80033a8:	68e0      	ldr	r0, [r4, #12]
 80033aa:	9b03      	ldr	r3, [sp, #12]
 80033ac:	4298      	cmp	r0, r3
 80033ae:	bfb8      	it	lt
 80033b0:	4618      	movlt	r0, r3
 80033b2:	e7a6      	b.n	8003302 <_printf_i+0x15e>
 80033b4:	2301      	movs	r3, #1
 80033b6:	4632      	mov	r2, r6
 80033b8:	4649      	mov	r1, r9
 80033ba:	4640      	mov	r0, r8
 80033bc:	47d0      	blx	sl
 80033be:	3001      	adds	r0, #1
 80033c0:	d09d      	beq.n	80032fe <_printf_i+0x15a>
 80033c2:	3501      	adds	r5, #1
 80033c4:	68e3      	ldr	r3, [r4, #12]
 80033c6:	9903      	ldr	r1, [sp, #12]
 80033c8:	1a5b      	subs	r3, r3, r1
 80033ca:	42ab      	cmp	r3, r5
 80033cc:	dcf2      	bgt.n	80033b4 <_printf_i+0x210>
 80033ce:	e7eb      	b.n	80033a8 <_printf_i+0x204>
 80033d0:	2500      	movs	r5, #0
 80033d2:	f104 0619 	add.w	r6, r4, #25
 80033d6:	e7f5      	b.n	80033c4 <_printf_i+0x220>
 80033d8:	08003e57 	.word	0x08003e57
 80033dc:	08003e68 	.word	0x08003e68

080033e0 <memmove>:
 80033e0:	4288      	cmp	r0, r1
 80033e2:	b510      	push	{r4, lr}
 80033e4:	eb01 0402 	add.w	r4, r1, r2
 80033e8:	d902      	bls.n	80033f0 <memmove+0x10>
 80033ea:	4284      	cmp	r4, r0
 80033ec:	4623      	mov	r3, r4
 80033ee:	d807      	bhi.n	8003400 <memmove+0x20>
 80033f0:	1e43      	subs	r3, r0, #1
 80033f2:	42a1      	cmp	r1, r4
 80033f4:	d008      	beq.n	8003408 <memmove+0x28>
 80033f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033fe:	e7f8      	b.n	80033f2 <memmove+0x12>
 8003400:	4402      	add	r2, r0
 8003402:	4601      	mov	r1, r0
 8003404:	428a      	cmp	r2, r1
 8003406:	d100      	bne.n	800340a <memmove+0x2a>
 8003408:	bd10      	pop	{r4, pc}
 800340a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800340e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003412:	e7f7      	b.n	8003404 <memmove+0x24>

08003414 <_sbrk_r>:
 8003414:	b538      	push	{r3, r4, r5, lr}
 8003416:	4d06      	ldr	r5, [pc, #24]	@ (8003430 <_sbrk_r+0x1c>)
 8003418:	2300      	movs	r3, #0
 800341a:	4604      	mov	r4, r0
 800341c:	4608      	mov	r0, r1
 800341e:	602b      	str	r3, [r5, #0]
 8003420:	f7fd ffc4 	bl	80013ac <_sbrk>
 8003424:	1c43      	adds	r3, r0, #1
 8003426:	d102      	bne.n	800342e <_sbrk_r+0x1a>
 8003428:	682b      	ldr	r3, [r5, #0]
 800342a:	b103      	cbz	r3, 800342e <_sbrk_r+0x1a>
 800342c:	6023      	str	r3, [r4, #0]
 800342e:	bd38      	pop	{r3, r4, r5, pc}
 8003430:	200041b8 	.word	0x200041b8

08003434 <_realloc_r>:
 8003434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003438:	4607      	mov	r7, r0
 800343a:	4614      	mov	r4, r2
 800343c:	460d      	mov	r5, r1
 800343e:	b921      	cbnz	r1, 800344a <_realloc_r+0x16>
 8003440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003444:	4611      	mov	r1, r2
 8003446:	f7ff bc5b 	b.w	8002d00 <_malloc_r>
 800344a:	b92a      	cbnz	r2, 8003458 <_realloc_r+0x24>
 800344c:	f7ff fbec 	bl	8002c28 <_free_r>
 8003450:	4625      	mov	r5, r4
 8003452:	4628      	mov	r0, r5
 8003454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003458:	f000 f81a 	bl	8003490 <_malloc_usable_size_r>
 800345c:	4284      	cmp	r4, r0
 800345e:	4606      	mov	r6, r0
 8003460:	d802      	bhi.n	8003468 <_realloc_r+0x34>
 8003462:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003466:	d8f4      	bhi.n	8003452 <_realloc_r+0x1e>
 8003468:	4621      	mov	r1, r4
 800346a:	4638      	mov	r0, r7
 800346c:	f7ff fc48 	bl	8002d00 <_malloc_r>
 8003470:	4680      	mov	r8, r0
 8003472:	b908      	cbnz	r0, 8003478 <_realloc_r+0x44>
 8003474:	4645      	mov	r5, r8
 8003476:	e7ec      	b.n	8003452 <_realloc_r+0x1e>
 8003478:	42b4      	cmp	r4, r6
 800347a:	4622      	mov	r2, r4
 800347c:	4629      	mov	r1, r5
 800347e:	bf28      	it	cs
 8003480:	4632      	movcs	r2, r6
 8003482:	f7ff fbc3 	bl	8002c0c <memcpy>
 8003486:	4629      	mov	r1, r5
 8003488:	4638      	mov	r0, r7
 800348a:	f7ff fbcd 	bl	8002c28 <_free_r>
 800348e:	e7f1      	b.n	8003474 <_realloc_r+0x40>

08003490 <_malloc_usable_size_r>:
 8003490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003494:	1f18      	subs	r0, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	bfbc      	itt	lt
 800349a:	580b      	ldrlt	r3, [r1, r0]
 800349c:	18c0      	addlt	r0, r0, r3
 800349e:	4770      	bx	lr

080034a0 <_init>:
 80034a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a2:	bf00      	nop
 80034a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034a6:	bc08      	pop	{r3}
 80034a8:	469e      	mov	lr, r3
 80034aa:	4770      	bx	lr

080034ac <_fini>:
 80034ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ae:	bf00      	nop
 80034b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b2:	bc08      	pop	{r3}
 80034b4:	469e      	mov	lr, r3
 80034b6:	4770      	bx	lr
